
Embedded_OS_Lab1_p76091307.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004494  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004624  08004624  00014624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004678  08004678  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004680  08004680  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004684  08004684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e18  20000010  08004698  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e28  08004698  00022e28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc33  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000243f  00000000  00000000  0002fc73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e20  00000000  00000000  000320b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d08  00000000  00000000  00032ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000211c6  00000000  00000000  00033be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad7a  00000000  00000000  00054da6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdae9  00000000  00000000  0005fb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012d609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a1c  00000000  00000000  0012d684  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800460c 	.word	0x0800460c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800460c 	.word	0x0800460c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 facb 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f84f 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f8ab 	bl	8000638 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
    xQueue1 = xQueueCreate(1, sizeof(int) );
 80004e2:	2200      	movs	r2, #0
 80004e4:	2104      	movs	r1, #4
 80004e6:	2001      	movs	r0, #1
 80004e8:	f001 fd66 	bl	8001fb8 <xQueueGenericCreate>
 80004ec:	4602      	mov	r2, r0
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <main+0x7c>)
 80004f0:	601a      	str	r2, [r3, #0]
    xLEDReturned1 = xTaskCreate(
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <main+0x80>)
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2301      	movs	r3, #1
 80004fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000500:	4914      	ldr	r1, [pc, #80]	; (8000554 <main+0x84>)
 8000502:	4815      	ldr	r0, [pc, #84]	; (8000558 <main+0x88>)
 8000504:	f002 f98c 	bl	8002820 <xTaskCreate>
 8000508:	4602      	mov	r2, r0
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <main+0x8c>)
 800050c:	601a      	str	r2, [r3, #0]
    						 "LEDTask1",
    						(configSTACK_DEPTH_TYPE)256,
    						(void *) 1,
							1,
							&xHandle1);
    xLEDReturned2 = xTaskCreate(
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <main+0x90>)
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2301      	movs	r3, #1
 8000518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051c:	4911      	ldr	r1, [pc, #68]	; (8000564 <main+0x94>)
 800051e:	4812      	ldr	r0, [pc, #72]	; (8000568 <main+0x98>)
 8000520:	f002 f97e 	bl	8002820 <xTaskCreate>
 8000524:	4602      	mov	r2, r0
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <main+0x9c>)
 8000528:	601a      	str	r2, [r3, #0]
    						 "LEDTask2",
    						(configSTACK_DEPTH_TYPE)256,
    						(void *) 1,
							1,
							&xHandle2);
    xButtonReturned = xTaskCreate(
 800052a:	2300      	movs	r3, #0
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2302      	movs	r3, #2
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2301      	movs	r3, #1
 8000534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000538:	490d      	ldr	r1, [pc, #52]	; (8000570 <main+0xa0>)
 800053a:	480e      	ldr	r0, [pc, #56]	; (8000574 <main+0xa4>)
 800053c:	f002 f970 	bl	8002820 <xTaskCreate>
 8000540:	4602      	mov	r2, r0
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <main+0xa8>)
 8000544:	601a      	str	r2, [r3, #0]
    						 "ButtonTask",
    						(configSTACK_DEPTH_TYPE)256,
    						(void *) 1,
							2,
    						NULL);//tskIDLE_PRIORITY
    vTaskStartScheduler();
 8000546:	f002 fbfb 	bl	8002d40 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054a:	e7fe      	b.n	800054a <main+0x7a>
 800054c:	20012da0 	.word	0x20012da0
 8000550:	20012d98 	.word	0x20012d98
 8000554:	08004624 	.word	0x08004624
 8000558:	080006dd 	.word	0x080006dd
 800055c:	20012d90 	.word	0x20012d90
 8000560:	20012d94 	.word	0x20012d94
 8000564:	08004630 	.word	0x08004630
 8000568:	0800074d 	.word	0x0800074d
 800056c:	20012d9c 	.word	0x20012d9c
 8000570:	0800463c 	.word	0x0800463c
 8000574:	080007ad 	.word	0x080007ad
 8000578:	20012d8c 	.word	0x20012d8c

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 f835 	bl	80045fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xb4>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <SystemClock_Config+0xb4>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SystemClock_Config+0xb4>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <SystemClock_Config+0xb8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <SystemClock_Config+0xb8>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <SystemClock_Config+0xb8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fd2f 	bl	8001050 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005f8:	f000 f956 	bl	80008a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f000 ff8a 	bl	8001530 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000622:	f000 f941 	bl	80008a8 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_GPIO_Init+0x98>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <MX_GPIO_Init+0x98>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_GPIO_Init+0x98>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <MX_GPIO_Init+0x98>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <MX_GPIO_Init+0x98>)
 8000674:	f043 0308 	orr.w	r3, r3, #8
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_GPIO_Init+0x98>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0308 	and.w	r3, r3, #8
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800068c:	4811      	ldr	r0, [pc, #68]	; (80006d4 <MX_GPIO_Init+0x9c>)
 800068e:	f000 fcc5 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8000692:	2301      	movs	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	4619      	mov	r1, r3
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <MX_GPIO_Init+0xa0>)
 80006a6:	f000 fb07 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 80006aa:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80006ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	4619      	mov	r1, r3
 80006c2:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_GPIO_Init+0x9c>)
 80006c4:	f000 faf8 	bl	8000cb8 <HAL_GPIO_Init>

}
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020c00 	.word	0x40020c00
 80006d8:	40020000 	.word	0x40020000

080006dc <LEDTask_App1>:

/* USER CODE BEGIN 4 */

void LEDTask_App1(void *pvParameters){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  int flag = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
   for(;;){
	   //vTaskResume(xButtonReturned);
             xQueueReceive(xQueue1,&flag,(TickType_t)0);
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <LEDTask_App1+0x68>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f107 010c 	add.w	r1, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fe4c 	bl	8002390 <xQueueReceive>
             if (flag%2 == 0){
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1f2      	bne.n	80006e8 <LEDTask_App1+0xc>
     			//vTaskSuspend(xLEDReturned2);
				HAL_GPIO_WritePin(Green_LED_GPIO_Port, GPIO_PIN_12, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000708:	480f      	ldr	r0, [pc, #60]	; (8000748 <LEDTask_App1+0x6c>)
 800070a:	f000 fc87 	bl	800101c <HAL_GPIO_WritePin>
				vTaskDelay(5000);
 800070e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000712:	f002 f9c3 	bl	8002a9c <vTaskDelay>
				HAL_GPIO_WritePin(Green_LED_GPIO_Port, GPIO_PIN_12, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071c:	480a      	ldr	r0, [pc, #40]	; (8000748 <LEDTask_App1+0x6c>)
 800071e:	f000 fc7d 	bl	800101c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Red_LED_GPIO_Port, GPIO_PIN_14, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000728:	4807      	ldr	r0, [pc, #28]	; (8000748 <LEDTask_App1+0x6c>)
 800072a:	f000 fc77 	bl	800101c <HAL_GPIO_WritePin>
				vTaskDelay(5000);
 800072e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000732:	f002 f9b3 	bl	8002a9c <vTaskDelay>
				HAL_GPIO_WritePin(Red_LED_GPIO_Port, GPIO_PIN_14, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <LEDTask_App1+0x6c>)
 800073e:	f000 fc6d 	bl	800101c <HAL_GPIO_WritePin>
             xQueueReceive(xQueue1,&flag,(TickType_t)0);
 8000742:	e7d1      	b.n	80006e8 <LEDTask_App1+0xc>
 8000744:	20012da0 	.word	0x20012da0
 8000748:	40020c00 	.word	0x40020c00

0800074c <LEDTask_App2>:
			 }

    }
}
void LEDTask_App2(void *pvParameters){
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	int flag = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
	for(;;){
		 xQueueReceive(xQueue1,&flag,(TickType_t) 0);
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <LEDTask_App2+0x58>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f107 010c 	add.w	r1, r7, #12
 8000760:	2200      	movs	r2, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fe14 	bl	8002390 <xQueueReceive>
		 if (flag%2 == 1){
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b00      	cmp	r3, #0
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	bfb8      	it	lt
 8000772:	425b      	neglt	r3, r3
 8000774:	2b01      	cmp	r3, #1
 8000776:	d1ef      	bne.n	8000758 <LEDTask_App2+0xc>
			 HAL_GPIO_WritePin(Red_LED_GPIO_Port, GPIO_PIN_14, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077e:	480a      	ldr	r0, [pc, #40]	; (80007a8 <LEDTask_App2+0x5c>)
 8000780:	f000 fc4c 	bl	800101c <HAL_GPIO_WritePin>
			 vTaskDelay(1000);
 8000784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000788:	f002 f988 	bl	8002a9c <vTaskDelay>
			 HAL_GPIO_WritePin(Red_LED_GPIO_Port, GPIO_PIN_14, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <LEDTask_App2+0x5c>)
 8000794:	f000 fc42 	bl	800101c <HAL_GPIO_WritePin>
			 vTaskDelay(1000);
 8000798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079c:	f002 f97e 	bl	8002a9c <vTaskDelay>
		 xQueueReceive(xQueue1,&flag,(TickType_t) 0);
 80007a0:	e7da      	b.n	8000758 <LEDTask_App2+0xc>
 80007a2:	bf00      	nop
 80007a4:	20012da0 	.word	0x20012da0
 80007a8:	40020c00 	.word	0x40020c00

080007ac <ButtonTask_App>:
		 }
	}
}
void ButtonTask_App(void *pvParameters)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	int flag = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
	for(;;){
		while(!HAL_GPIO_ReadPin(Blue_Button_GPIO_Port,GPIO_PIN_0)){
 80007b8:	e002      	b.n	80007c0 <ButtonTask_App+0x14>
			vTaskDelay(5);
 80007ba:	2005      	movs	r0, #5
 80007bc:	f002 f96e 	bl	8002a9c <vTaskDelay>
		while(!HAL_GPIO_ReadPin(Blue_Button_GPIO_Port,GPIO_PIN_0)){
 80007c0:	2101      	movs	r1, #1
 80007c2:	482b      	ldr	r0, [pc, #172]	; (8000870 <ButtonTask_App+0xc4>)
 80007c4:	f000 fc12 	bl	8000fec <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f5      	beq.n	80007ba <ButtonTask_App+0xe>
		}
		vTaskDelay(60);
 80007ce:	203c      	movs	r0, #60	; 0x3c
 80007d0:	f002 f964 	bl	8002a9c <vTaskDelay>
		if(HAL_GPIO_ReadPin(Blue_Button_GPIO_Port,GPIO_PIN_0)){
 80007d4:	2101      	movs	r1, #1
 80007d6:	4826      	ldr	r0, [pc, #152]	; (8000870 <ButtonTask_App+0xc4>)
 80007d8:	f000 fc08 	bl	8000fec <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d042      	beq.n	8000868 <ButtonTask_App+0xbc>

			if(flag%2 == 1){
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	bfb8      	it	lt
 80007ec:	425b      	neglt	r3, r3
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d119      	bne.n	8000826 <ButtonTask_App+0x7a>
				flag += 1;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
				vTaskSuspend(xHandle2);
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <ButtonTask_App+0xc8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 f981 	bl	8002b04 <vTaskSuspend>
				HAL_GPIO_WritePin(Green_LED_GPIO_Port, GPIO_PIN_12, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000808:	481b      	ldr	r0, [pc, #108]	; (8000878 <ButtonTask_App+0xcc>)
 800080a:	f000 fc07 	bl	800101c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Red_LED_GPIO_Port, GPIO_PIN_14, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000814:	4818      	ldr	r0, [pc, #96]	; (8000878 <ButtonTask_App+0xcc>)
 8000816:	f000 fc01 	bl	800101c <HAL_GPIO_WritePin>
				vTaskResume(xHandle1);
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <ButtonTask_App+0xd0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f002 fa32 	bl	8002c88 <vTaskResume>
 8000824:	e018      	b.n	8000858 <ButtonTask_App+0xac>
			}
			else{
				flag += 1;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	3301      	adds	r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
				vTaskSuspend(xHandle1);
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <ButtonTask_App+0xd0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f002 f967 	bl	8002b04 <vTaskSuspend>
				HAL_GPIO_WritePin(Green_LED_GPIO_Port, GPIO_PIN_12, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083c:	480e      	ldr	r0, [pc, #56]	; (8000878 <ButtonTask_App+0xcc>)
 800083e:	f000 fbed 	bl	800101c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Red_LED_GPIO_Port, GPIO_PIN_14, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <ButtonTask_App+0xcc>)
 800084a:	f000 fbe7 	bl	800101c <HAL_GPIO_WritePin>
				vTaskResume(xHandle2);
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <ButtonTask_App+0xc8>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	f002 fa18 	bl	8002c88 <vTaskResume>
			}
			xQueueOverwrite( xQueue1, &flag);
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <ButtonTask_App+0xd4>)
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	f107 010c 	add.w	r1, r7, #12
 8000860:	2302      	movs	r3, #2
 8000862:	2200      	movs	r2, #0
 8000864:	f001 fc06 	bl	8002074 <xQueueGenericSend>
		}


           // vTaskResume(xLEDReturned);
           //vTaskSuspend(NULL);
		vTaskDelay(60);
 8000868:	203c      	movs	r0, #60	; 0x3c
 800086a:	f002 f917 	bl	8002a9c <vTaskDelay>
		while(!HAL_GPIO_ReadPin(Blue_Button_GPIO_Port,GPIO_PIN_0)){
 800086e:	e7a7      	b.n	80007c0 <ButtonTask_App+0x14>
 8000870:	40020000 	.word	0x40020000
 8000874:	20012d94 	.word	0x20012d94
 8000878:	40020c00 	.word	0x40020c00
 800087c:	20012d98 	.word	0x20012d98
 8000880:	20012da0 	.word	0x20012da0

08000884 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d101      	bne.n	800089a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000896:	f000 f90d 	bl	8000ab4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40001000 	.word	0x40001000

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ae:	e7fe      	b.n	80008ae <Error_Handler+0x6>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08c      	sub	sp, #48	; 0x30
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000910:	2200      	movs	r2, #0
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	2036      	movs	r0, #54	; 0x36
 8000916:	f000 f9a5 	bl	8000c64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800091a:	2036      	movs	r0, #54	; 0x36
 800091c:	f000 f9be 	bl	8000c9c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <HAL_InitTick+0xa0>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <HAL_InitTick+0xa0>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6413      	str	r3, [r2, #64]	; 0x40
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_InitTick+0xa0>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	f003 0310 	and.w	r3, r3, #16
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800093c:	f107 0210 	add.w	r2, r7, #16
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f000 ffaa 	bl	80018a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800094c:	f000 ff94 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 8000950:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000954:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <HAL_InitTick+0xa4>)
 8000956:	fba2 2303 	umull	r2, r3, r2, r3
 800095a:	0c9b      	lsrs	r3, r3, #18
 800095c:	3b01      	subs	r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_InitTick+0xa8>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <HAL_InitTick+0xac>)
 8000964:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_InitTick+0xa8>)
 8000968:	f240 32e7 	movw	r2, #999	; 0x3e7
 800096c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_InitTick+0xa8>)
 8000970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000972:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_InitTick+0xa8>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_InitTick+0xa8>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <HAL_InitTick+0xa8>)
 8000982:	f000 ffbf 	bl	8001904 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d104      	bne.n	8000996 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800098c:	4806      	ldr	r0, [pc, #24]	; (80009a8 <HAL_InitTick+0xa8>)
 800098e:	f000 ffee 	bl	800196e <HAL_TIM_Base_Start_IT>
 8000992:	4603      	mov	r3, r0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3730      	adds	r7, #48	; 0x30
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	431bde83 	.word	0x431bde83
 80009a8:	20012da4 	.word	0x20012da4
 80009ac:	40001000 	.word	0x40001000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <TIM6_DAC_IRQHandler+0x10>)
 80009e2:	f000 ffe8 	bl	80019b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20012da4 	.word	0x20012da4

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <SystemInit+0x28>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <SystemInit+0x28>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <SystemInit+0x28>)
 8000a06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a22:	e003      	b.n	8000a2c <LoopCopyDataInit>

08000a24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a2a:	3104      	adds	r1, #4

08000a2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a2c:	480b      	ldr	r0, [pc, #44]	; (8000a5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a34:	d3f6      	bcc.n	8000a24 <CopyDataInit>
  ldr  r2, =_sbss
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a38:	e002      	b.n	8000a40 <LoopFillZerobss>

08000a3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a3c:	f842 3b04 	str.w	r3, [r2], #4

08000a40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a44:	d3f9      	bcc.n	8000a3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a46:	f7ff ffd3 	bl	80009f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f003 fda7 	bl	800459c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4e:	f7ff fd3f 	bl	80004d0 <main>
  bx  lr    
 8000a52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a58:	08004688 	.word	0x08004688
  ldr  r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a60:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000a64:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000a68:	20012e28 	.word	0x20012e28

08000a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <HAL_Init+0x40>)
 8000a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_Init+0x40>)
 8000a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_Init+0x40>)
 8000a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f8d8 	bl	8000c4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff2e 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff ff04 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023c00 	.word	0x40023c00

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20012de4 	.word	0x20012de4

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20012de4 	.word	0x20012de4

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0b      	blt.n	8000b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 021f 	and.w	r2, r3, #31
 8000b70:	4907      	ldr	r1, [pc, #28]	; (8000b90 <__NVIC_EnableIRQ+0x38>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
         );
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	; 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ff4c 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c76:	f7ff ff61 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000c7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	68b9      	ldr	r1, [r7, #8]
 8000c80:	6978      	ldr	r0, [r7, #20]
 8000c82:	f7ff ffb1 	bl	8000be8 <NVIC_EncodePriority>
 8000c86:	4602      	mov	r2, r0
 8000c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff80 	bl	8000b94 <__NVIC_SetPriority>
}
 8000c94:	bf00      	nop
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff54 	bl	8000b58 <__NVIC_EnableIRQ>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e16b      	b.n	8000fac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 815a 	bne.w	8000fa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d00b      	beq.n	8000d12 <HAL_GPIO_Init+0x5a>
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d007      	beq.n	8000d12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d06:	2b11      	cmp	r3, #17
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b12      	cmp	r3, #18
 8000d10:	d130      	bne.n	8000d74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	f003 0201 	and.w	r2, r3, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0xfc>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b12      	cmp	r3, #18
 8000db2:	d123      	bne.n	8000dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	69b9      	ldr	r1, [r7, #24]
 8000df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0203 	and.w	r2, r3, #3
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80b4 	beq.w	8000fa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b5f      	ldr	r3, [pc, #380]	; (8000fc0 <HAL_GPIO_Init+0x308>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a5e      	ldr	r2, [pc, #376]	; (8000fc0 <HAL_GPIO_Init+0x308>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b5c      	ldr	r3, [pc, #368]	; (8000fc0 <HAL_GPIO_Init+0x308>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5a:	4a5a      	ldr	r2, [pc, #360]	; (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a51      	ldr	r2, [pc, #324]	; (8000fc8 <HAL_GPIO_Init+0x310>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d02b      	beq.n	8000ede <HAL_GPIO_Init+0x226>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a50      	ldr	r2, [pc, #320]	; (8000fcc <HAL_GPIO_Init+0x314>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d025      	beq.n	8000eda <HAL_GPIO_Init+0x222>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4f      	ldr	r2, [pc, #316]	; (8000fd0 <HAL_GPIO_Init+0x318>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d01f      	beq.n	8000ed6 <HAL_GPIO_Init+0x21e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4e      	ldr	r2, [pc, #312]	; (8000fd4 <HAL_GPIO_Init+0x31c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d019      	beq.n	8000ed2 <HAL_GPIO_Init+0x21a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4d      	ldr	r2, [pc, #308]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x216>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4c      	ldr	r2, [pc, #304]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x212>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4b      	ldr	r2, [pc, #300]	; (8000fe0 <HAL_GPIO_Init+0x328>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x20e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4a      	ldr	r2, [pc, #296]	; (8000fe4 <HAL_GPIO_Init+0x32c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x20a>
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	e00e      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	e00c      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	e00a      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000eca:	2305      	movs	r3, #5
 8000ecc:	e008      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e004      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e002      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	69fa      	ldr	r2, [r7, #28]
 8000ee2:	f002 0203 	and.w	r2, r2, #3
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	4093      	lsls	r3, r2
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef0:	4934      	ldr	r1, [pc, #208]	; (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000efe:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f22:	4a31      	ldr	r2, [pc, #196]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f28:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f4c:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f52:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f76:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa0:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	f67f ae90 	bls.w	8000cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3724      	adds	r7, #36	; 0x24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40013800 	.word	0x40013800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40021400 	.word	0x40021400
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	40021c00 	.word	0x40021c00
 8000fe8:	40013c00 	.word	0x40013c00

08000fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	e001      	b.n	800100e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
 8001028:	4613      	mov	r3, r2
 800102a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800102c:	787b      	ldrb	r3, [r7, #1]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001038:	e003      	b.n	8001042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800103a:	887b      	ldrh	r3, [r7, #2]
 800103c:	041a      	lsls	r2, r3, #16
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	619a      	str	r2, [r3, #24]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e25b      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d075      	beq.n	800115a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800106e:	4ba3      	ldr	r3, [pc, #652]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b04      	cmp	r3, #4
 8001078:	d00c      	beq.n	8001094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800107a:	4ba0      	ldr	r3, [pc, #640]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001082:	2b08      	cmp	r3, #8
 8001084:	d112      	bne.n	80010ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001086:	4b9d      	ldr	r3, [pc, #628]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001092:	d10b      	bne.n	80010ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001094:	4b99      	ldr	r3, [pc, #612]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d05b      	beq.n	8001158 <HAL_RCC_OscConfig+0x108>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d157      	bne.n	8001158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e236      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b4:	d106      	bne.n	80010c4 <HAL_RCC_OscConfig+0x74>
 80010b6:	4b91      	ldr	r3, [pc, #580]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a90      	ldr	r2, [pc, #576]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e01d      	b.n	8001100 <HAL_RCC_OscConfig+0xb0>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x98>
 80010ce:	4b8b      	ldr	r3, [pc, #556]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a8a      	ldr	r2, [pc, #552]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b88      	ldr	r3, [pc, #544]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a87      	ldr	r2, [pc, #540]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e00b      	b.n	8001100 <HAL_RCC_OscConfig+0xb0>
 80010e8:	4b84      	ldr	r3, [pc, #528]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a83      	ldr	r2, [pc, #524]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80010ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b81      	ldr	r3, [pc, #516]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a80      	ldr	r2, [pc, #512]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80010fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d013      	beq.n	8001130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fce8 	bl	8000adc <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fce4 	bl	8000adc <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e1fb      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001122:	4b76      	ldr	r3, [pc, #472]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0xc0>
 800112e:	e014      	b.n	800115a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fcd4 	bl	8000adc <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fcd0 	bl	8000adc <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	; 0x64
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e1e7      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114a:	4b6c      	ldr	r3, [pc, #432]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0xe8>
 8001156:	e000      	b.n	800115a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d063      	beq.n	800122e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001166:	4b65      	ldr	r3, [pc, #404]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00b      	beq.n	800118a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001172:	4b62      	ldr	r3, [pc, #392]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800117a:	2b08      	cmp	r3, #8
 800117c:	d11c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800117e:	4b5f      	ldr	r3, [pc, #380]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d116      	bne.n	80011b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118a:	4b5c      	ldr	r3, [pc, #368]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d005      	beq.n	80011a2 <HAL_RCC_OscConfig+0x152>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d001      	beq.n	80011a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e1bb      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a2:	4b56      	ldr	r3, [pc, #344]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4952      	ldr	r1, [pc, #328]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	e03a      	b.n	800122e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d020      	beq.n	8001202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c0:	4b4f      	ldr	r3, [pc, #316]	; (8001300 <HAL_RCC_OscConfig+0x2b0>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c6:	f7ff fc89 	bl	8000adc <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ce:	f7ff fc85 	bl	8000adc <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e19c      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	4b46      	ldr	r3, [pc, #280]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	4b43      	ldr	r3, [pc, #268]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4940      	ldr	r1, [pc, #256]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	600b      	str	r3, [r1, #0]
 8001200:	e015      	b.n	800122e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001202:	4b3f      	ldr	r3, [pc, #252]	; (8001300 <HAL_RCC_OscConfig+0x2b0>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001208:	f7ff fc68 	bl	8000adc <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001210:	f7ff fc64 	bl	8000adc <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e17b      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001222:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d030      	beq.n	800129c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d016      	beq.n	8001270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HAL_RCC_OscConfig+0x2b4>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001248:	f7ff fc48 	bl	8000adc <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001250:	f7ff fc44 	bl	8000adc <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e15b      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 8001264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0x200>
 800126e:	e015      	b.n	800129c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001270:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_RCC_OscConfig+0x2b4>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001276:	f7ff fc31 	bl	8000adc <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800127e:	f7ff fc2d 	bl	8000adc <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e144      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 8001292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80a0 	beq.w	80013ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10f      	bne.n	80012da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d6:	2301      	movs	r3, #1
 80012d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_RCC_OscConfig+0x2b8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d121      	bne.n	800132a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_RCC_OscConfig+0x2b8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_RCC_OscConfig+0x2b8>)
 80012ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fbf3 	bl	8000adc <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	e011      	b.n	800131e <HAL_RCC_OscConfig+0x2ce>
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	42470000 	.word	0x42470000
 8001304:	42470e80 	.word	0x42470e80
 8001308:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130c:	f7ff fbe6 	bl	8000adc <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e0fd      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	4b81      	ldr	r3, [pc, #516]	; (8001524 <HAL_RCC_OscConfig+0x4d4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d106      	bne.n	8001340 <HAL_RCC_OscConfig+0x2f0>
 8001332:	4b7d      	ldr	r3, [pc, #500]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 8001334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001336:	4a7c      	ldr	r2, [pc, #496]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6713      	str	r3, [r2, #112]	; 0x70
 800133e:	e01c      	b.n	800137a <HAL_RCC_OscConfig+0x32a>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b05      	cmp	r3, #5
 8001346:	d10c      	bne.n	8001362 <HAL_RCC_OscConfig+0x312>
 8001348:	4b77      	ldr	r3, [pc, #476]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 800134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134c:	4a76      	ldr	r2, [pc, #472]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6713      	str	r3, [r2, #112]	; 0x70
 8001354:	4b74      	ldr	r3, [pc, #464]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 8001356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001358:	4a73      	ldr	r2, [pc, #460]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6713      	str	r3, [r2, #112]	; 0x70
 8001360:	e00b      	b.n	800137a <HAL_RCC_OscConfig+0x32a>
 8001362:	4b71      	ldr	r3, [pc, #452]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 8001364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001366:	4a70      	ldr	r2, [pc, #448]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 8001368:	f023 0301 	bic.w	r3, r3, #1
 800136c:	6713      	str	r3, [r2, #112]	; 0x70
 800136e:	4b6e      	ldr	r3, [pc, #440]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001372:	4a6d      	ldr	r2, [pc, #436]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 8001374:	f023 0304 	bic.w	r3, r3, #4
 8001378:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d015      	beq.n	80013ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001382:	f7ff fbab 	bl	8000adc <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001388:	e00a      	b.n	80013a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f7ff fba7 	bl	8000adc <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	f241 3288 	movw	r2, #5000	; 0x1388
 8001398:	4293      	cmp	r3, r2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e0bc      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a0:	4b61      	ldr	r3, [pc, #388]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 80013a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0ee      	beq.n	800138a <HAL_RCC_OscConfig+0x33a>
 80013ac:	e014      	b.n	80013d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fb95 	bl	8000adc <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b4:	e00a      	b.n	80013cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b6:	f7ff fb91 	bl	8000adc <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e0a6      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013cc:	4b56      	ldr	r3, [pc, #344]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1ee      	bne.n	80013b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d105      	bne.n	80013ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013de:	4b52      	ldr	r3, [pc, #328]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a51      	ldr	r2, [pc, #324]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 80013e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 8092 	beq.w	8001518 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013f4:	4b4c      	ldr	r3, [pc, #304]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d05c      	beq.n	80014ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d141      	bne.n	800148c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001408:	4b48      	ldr	r3, [pc, #288]	; (800152c <HAL_RCC_OscConfig+0x4dc>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fb65 	bl	8000adc <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001416:	f7ff fb61 	bl	8000adc <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e078      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001428:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f0      	bne.n	8001416 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69da      	ldr	r2, [r3, #28]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	019b      	lsls	r3, r3, #6
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	085b      	lsrs	r3, r3, #1
 800144c:	3b01      	subs	r3, #1
 800144e:	041b      	lsls	r3, r3, #16
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001456:	061b      	lsls	r3, r3, #24
 8001458:	4933      	ldr	r1, [pc, #204]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 800145a:	4313      	orrs	r3, r2
 800145c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800145e:	4b33      	ldr	r3, [pc, #204]	; (800152c <HAL_RCC_OscConfig+0x4dc>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fb3a 	bl	8000adc <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff fb36 	bl	8000adc <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e04d      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x41c>
 800148a:	e045      	b.n	8001518 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_RCC_OscConfig+0x4dc>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fb23 	bl	8000adc <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800149a:	f7ff fb1f 	bl	8000adc <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e036      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x44a>
 80014b8:	e02e      	b.n	8001518 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e029      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_RCC_OscConfig+0x4d8>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d11c      	bne.n	8001514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d115      	bne.n	8001514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014ee:	4013      	ands	r3, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d10d      	bne.n	8001514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d106      	bne.n	8001514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40007000 	.word	0x40007000
 8001528:	40023800 	.word	0x40023800
 800152c:	42470060 	.word	0x42470060

08001530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0cc      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001544:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d90c      	bls.n	800156c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001552:	4b65      	ldr	r3, [pc, #404]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0b8      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d020      	beq.n	80015ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001584:	4b59      	ldr	r3, [pc, #356]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4a58      	ldr	r2, [pc, #352]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800158e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800159c:	4b53      	ldr	r3, [pc, #332]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4a52      	ldr	r2, [pc, #328]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a8:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	494d      	ldr	r1, [pc, #308]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d044      	beq.n	8001650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	4b47      	ldr	r3, [pc, #284]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d119      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e07f      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d003      	beq.n	80015ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ee:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e06f      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fe:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e067      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160e:	4b37      	ldr	r3, [pc, #220]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f023 0203 	bic.w	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4934      	ldr	r1, [pc, #208]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	4313      	orrs	r3, r2
 800161e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001620:	f7ff fa5c 	bl	8000adc <HAL_GetTick>
 8001624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	e00a      	b.n	800163e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001628:	f7ff fa58 	bl	8000adc <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e04f      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 020c 	and.w	r2, r3, #12
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	429a      	cmp	r2, r3
 800164e:	d1eb      	bne.n	8001628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001650:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d20c      	bcs.n	8001678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e032      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4916      	ldr	r1, [pc, #88]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	4313      	orrs	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	490e      	ldr	r1, [pc, #56]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016b6:	f000 f821 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 80016ba:	4601      	mov	r1, r0
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_RCC_ClockConfig+0x1c0>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	fa21 f303 	lsr.w	r3, r1, r3
 80016ce:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff f912 	bl	8000900 <HAL_InitTick>

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00
 80016ec:	40023800 	.word	0x40023800
 80016f0:	08004660 	.word	0x08004660
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000004 	.word	0x20000004

080016fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001712:	4b50      	ldr	r3, [pc, #320]	; (8001854 <HAL_RCC_GetSysClockFreq+0x158>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b04      	cmp	r3, #4
 800171c:	d007      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x32>
 800171e:	2b08      	cmp	r3, #8
 8001720:	d008      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x38>
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 808d 	bne.w	8001842 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001728:	4b4b      	ldr	r3, [pc, #300]	; (8001858 <HAL_RCC_GetSysClockFreq+0x15c>)
 800172a:	60bb      	str	r3, [r7, #8]
       break;
 800172c:	e08c      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800172e:	4b4b      	ldr	r3, [pc, #300]	; (800185c <HAL_RCC_GetSysClockFreq+0x160>)
 8001730:	60bb      	str	r3, [r7, #8]
      break;
 8001732:	e089      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001734:	4b47      	ldr	r3, [pc, #284]	; (8001854 <HAL_RCC_GetSysClockFreq+0x158>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800173c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800173e:	4b45      	ldr	r3, [pc, #276]	; (8001854 <HAL_RCC_GetSysClockFreq+0x158>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d023      	beq.n	8001792 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174a:	4b42      	ldr	r3, [pc, #264]	; (8001854 <HAL_RCC_GetSysClockFreq+0x158>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	f04f 0400 	mov.w	r4, #0
 8001754:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	ea03 0501 	and.w	r5, r3, r1
 8001760:	ea04 0602 	and.w	r6, r4, r2
 8001764:	4a3d      	ldr	r2, [pc, #244]	; (800185c <HAL_RCC_GetSysClockFreq+0x160>)
 8001766:	fb02 f106 	mul.w	r1, r2, r6
 800176a:	2200      	movs	r2, #0
 800176c:	fb02 f205 	mul.w	r2, r2, r5
 8001770:	440a      	add	r2, r1
 8001772:	493a      	ldr	r1, [pc, #232]	; (800185c <HAL_RCC_GetSysClockFreq+0x160>)
 8001774:	fba5 0101 	umull	r0, r1, r5, r1
 8001778:	1853      	adds	r3, r2, r1
 800177a:	4619      	mov	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f04f 0400 	mov.w	r4, #0
 8001782:	461a      	mov	r2, r3
 8001784:	4623      	mov	r3, r4
 8001786:	f7fe fd23 	bl	80001d0 <__aeabi_uldivmod>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	e049      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001792:	4b30      	ldr	r3, [pc, #192]	; (8001854 <HAL_RCC_GetSysClockFreq+0x158>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	099b      	lsrs	r3, r3, #6
 8001798:	f04f 0400 	mov.w	r4, #0
 800179c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	ea03 0501 	and.w	r5, r3, r1
 80017a8:	ea04 0602 	and.w	r6, r4, r2
 80017ac:	4629      	mov	r1, r5
 80017ae:	4632      	mov	r2, r6
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	f04f 0400 	mov.w	r4, #0
 80017b8:	0154      	lsls	r4, r2, #5
 80017ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017be:	014b      	lsls	r3, r1, #5
 80017c0:	4619      	mov	r1, r3
 80017c2:	4622      	mov	r2, r4
 80017c4:	1b49      	subs	r1, r1, r5
 80017c6:	eb62 0206 	sbc.w	r2, r2, r6
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	f04f 0400 	mov.w	r4, #0
 80017d2:	0194      	lsls	r4, r2, #6
 80017d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017d8:	018b      	lsls	r3, r1, #6
 80017da:	1a5b      	subs	r3, r3, r1
 80017dc:	eb64 0402 	sbc.w	r4, r4, r2
 80017e0:	f04f 0100 	mov.w	r1, #0
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	00e2      	lsls	r2, r4, #3
 80017ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017ee:	00d9      	lsls	r1, r3, #3
 80017f0:	460b      	mov	r3, r1
 80017f2:	4614      	mov	r4, r2
 80017f4:	195b      	adds	r3, r3, r5
 80017f6:	eb44 0406 	adc.w	r4, r4, r6
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	02a2      	lsls	r2, r4, #10
 8001804:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001808:	0299      	lsls	r1, r3, #10
 800180a:	460b      	mov	r3, r1
 800180c:	4614      	mov	r4, r2
 800180e:	4618      	mov	r0, r3
 8001810:	4621      	mov	r1, r4
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f04f 0400 	mov.w	r4, #0
 8001818:	461a      	mov	r2, r3
 800181a:	4623      	mov	r3, r4
 800181c:	f7fe fcd8 	bl	80001d0 <__aeabi_uldivmod>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_GetSysClockFreq+0x158>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	0c1b      	lsrs	r3, r3, #16
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	3301      	adds	r3, #1
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	60bb      	str	r3, [r7, #8]
      break;
 8001840:	e002      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001844:	60bb      	str	r3, [r7, #8]
      break;
 8001846:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001848:	68bb      	ldr	r3, [r7, #8]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	00f42400 	.word	0x00f42400
 800185c:	017d7840 	.word	0x017d7840

08001860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_RCC_GetHCLKFreq+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000000 	.word	0x20000000

08001878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800187c:	f7ff fff0 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 8001880:	4601      	mov	r1, r0
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	0a9b      	lsrs	r3, r3, #10
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	4a03      	ldr	r2, [pc, #12]	; (800189c <HAL_RCC_GetPCLK1Freq+0x24>)
 800188e:	5cd3      	ldrb	r3, [r2, r3]
 8001890:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	08004670 	.word	0x08004670

080018a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	220f      	movs	r2, #15
 80018ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RCC_GetClockConfig+0x5c>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 0203 	and.w	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_RCC_GetClockConfig+0x5c>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_RCC_GetClockConfig+0x5c>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_GetClockConfig+0x5c>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_RCC_GetClockConfig+0x60>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 020f 	and.w	r2, r3, #15
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	601a      	str	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40023c00 	.word	0x40023c00

08001904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e01d      	b.n	8001952 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f815 	bl	800195a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3304      	adds	r3, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4610      	mov	r0, r2
 8001944:	f000 f968 	bl	8001c18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800196e:	b480      	push	{r7}
 8001970:	b085      	sub	sp, #20
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0201 	orr.w	r2, r2, #1
 8001984:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2b06      	cmp	r3, #6
 8001996:	d007      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d122      	bne.n	8001a12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d11b      	bne.n	8001a12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f06f 0202 	mvn.w	r2, #2
 80019e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f8ee 	bl	8001bda <HAL_TIM_IC_CaptureCallback>
 80019fe:	e005      	b.n	8001a0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f8e0 	bl	8001bc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f8f1 	bl	8001bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d122      	bne.n	8001a66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d11b      	bne.n	8001a66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f06f 0204 	mvn.w	r2, #4
 8001a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f8c4 	bl	8001bda <HAL_TIM_IC_CaptureCallback>
 8001a52:	e005      	b.n	8001a60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f8b6 	bl	8001bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f8c7 	bl	8001bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d122      	bne.n	8001aba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d11b      	bne.n	8001aba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f06f 0208 	mvn.w	r2, #8
 8001a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2204      	movs	r2, #4
 8001a90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f89a 	bl	8001bda <HAL_TIM_IC_CaptureCallback>
 8001aa6:	e005      	b.n	8001ab4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f88c 	bl	8001bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f89d 	bl	8001bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b10      	cmp	r3, #16
 8001ac6:	d122      	bne.n	8001b0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b10      	cmp	r3, #16
 8001ad4:	d11b      	bne.n	8001b0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f06f 0210 	mvn.w	r2, #16
 8001ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f870 	bl	8001bda <HAL_TIM_IC_CaptureCallback>
 8001afa:	e005      	b.n	8001b08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f862 	bl	8001bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f873 	bl	8001bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d10e      	bne.n	8001b3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d107      	bne.n	8001b3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f06f 0201 	mvn.w	r2, #1
 8001b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7fe fea5 	bl	8000884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b44:	2b80      	cmp	r3, #128	; 0x80
 8001b46:	d10e      	bne.n	8001b66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b52:	2b80      	cmp	r3, #128	; 0x80
 8001b54:	d107      	bne.n	8001b66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f903 	bl	8001d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b70:	2b40      	cmp	r3, #64	; 0x40
 8001b72:	d10e      	bne.n	8001b92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7e:	2b40      	cmp	r3, #64	; 0x40
 8001b80:	d107      	bne.n	8001b92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f838 	bl	8001c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d10e      	bne.n	8001bbe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f003 0320 	and.w	r3, r3, #32
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d107      	bne.n	8001bbe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f06f 0220 	mvn.w	r2, #32
 8001bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8cd 	bl	8001d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a40      	ldr	r2, [pc, #256]	; (8001d2c <TIM_Base_SetConfig+0x114>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d013      	beq.n	8001c58 <TIM_Base_SetConfig+0x40>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c36:	d00f      	beq.n	8001c58 <TIM_Base_SetConfig+0x40>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3d      	ldr	r2, [pc, #244]	; (8001d30 <TIM_Base_SetConfig+0x118>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d00b      	beq.n	8001c58 <TIM_Base_SetConfig+0x40>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3c      	ldr	r2, [pc, #240]	; (8001d34 <TIM_Base_SetConfig+0x11c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d007      	beq.n	8001c58 <TIM_Base_SetConfig+0x40>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a3b      	ldr	r2, [pc, #236]	; (8001d38 <TIM_Base_SetConfig+0x120>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d003      	beq.n	8001c58 <TIM_Base_SetConfig+0x40>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a3a      	ldr	r2, [pc, #232]	; (8001d3c <TIM_Base_SetConfig+0x124>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d108      	bne.n	8001c6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a2f      	ldr	r2, [pc, #188]	; (8001d2c <TIM_Base_SetConfig+0x114>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d02b      	beq.n	8001cca <TIM_Base_SetConfig+0xb2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c78:	d027      	beq.n	8001cca <TIM_Base_SetConfig+0xb2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a2c      	ldr	r2, [pc, #176]	; (8001d30 <TIM_Base_SetConfig+0x118>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d023      	beq.n	8001cca <TIM_Base_SetConfig+0xb2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a2b      	ldr	r2, [pc, #172]	; (8001d34 <TIM_Base_SetConfig+0x11c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d01f      	beq.n	8001cca <TIM_Base_SetConfig+0xb2>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a2a      	ldr	r2, [pc, #168]	; (8001d38 <TIM_Base_SetConfig+0x120>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d01b      	beq.n	8001cca <TIM_Base_SetConfig+0xb2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a29      	ldr	r2, [pc, #164]	; (8001d3c <TIM_Base_SetConfig+0x124>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d017      	beq.n	8001cca <TIM_Base_SetConfig+0xb2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a28      	ldr	r2, [pc, #160]	; (8001d40 <TIM_Base_SetConfig+0x128>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <TIM_Base_SetConfig+0xb2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a27      	ldr	r2, [pc, #156]	; (8001d44 <TIM_Base_SetConfig+0x12c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00f      	beq.n	8001cca <TIM_Base_SetConfig+0xb2>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a26      	ldr	r2, [pc, #152]	; (8001d48 <TIM_Base_SetConfig+0x130>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00b      	beq.n	8001cca <TIM_Base_SetConfig+0xb2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a25      	ldr	r2, [pc, #148]	; (8001d4c <TIM_Base_SetConfig+0x134>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d007      	beq.n	8001cca <TIM_Base_SetConfig+0xb2>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <TIM_Base_SetConfig+0x138>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d003      	beq.n	8001cca <TIM_Base_SetConfig+0xb2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <TIM_Base_SetConfig+0x13c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d108      	bne.n	8001cdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <TIM_Base_SetConfig+0x114>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d003      	beq.n	8001d10 <TIM_Base_SetConfig+0xf8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <TIM_Base_SetConfig+0x124>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d103      	bne.n	8001d18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	615a      	str	r2, [r3, #20]
}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40010000 	.word	0x40010000
 8001d30:	40000400 	.word	0x40000400
 8001d34:	40000800 	.word	0x40000800
 8001d38:	40000c00 	.word	0x40000c00
 8001d3c:	40010400 	.word	0x40010400
 8001d40:	40014000 	.word	0x40014000
 8001d44:	40014400 	.word	0x40014400
 8001d48:	40014800 	.word	0x40014800
 8001d4c:	40001800 	.word	0x40001800
 8001d50:	40001c00 	.word	0x40001c00
 8001d54:	40002000 	.word	0x40002000

08001d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f103 0208 	add.w	r2, r3, #8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f103 0208 	add.w	r2, r3, #8
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f103 0208 	add.w	r2, r3, #8
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b085      	sub	sp, #20
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	601a      	str	r2, [r3, #0]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e22:	b480      	push	{r7}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e38:	d103      	bne.n	8001e42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e00c      	b.n	8001e5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3308      	adds	r3, #8
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	e002      	b.n	8001e50 <vListInsert+0x2e>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d2f6      	bcs.n	8001e4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	601a      	str	r2, [r3, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6892      	ldr	r2, [r2, #8]
 8001eaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6852      	ldr	r2, [r2, #4]
 8001eb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d103      	bne.n	8001ec8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	1e5a      	subs	r2, r3, #1
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f00:	f383 8811 	msr	BASEPRI, r3
 8001f04:	f3bf 8f6f 	isb	sy
 8001f08:	f3bf 8f4f 	dsb	sy
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	e7fe      	b.n	8001f0e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001f10:	f002 f854 	bl	8003fbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1c:	68f9      	ldr	r1, [r7, #12]
 8001f1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	441a      	add	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	3b01      	subs	r3, #1
 8001f42:	68f9      	ldr	r1, [r7, #12]
 8001f44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f46:	fb01 f303 	mul.w	r3, r1, r3
 8001f4a:	441a      	add	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	22ff      	movs	r2, #255	; 0xff
 8001f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	22ff      	movs	r2, #255	; 0xff
 8001f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d114      	bne.n	8001f90 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01a      	beq.n	8001fa4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3310      	adds	r3, #16
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 f94a 	bl	800320c <xTaskRemoveFromEventList>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d012      	beq.n	8001fa4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <xQueueGenericReset+0xcc>)
 8001f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	f3bf 8f4f 	dsb	sy
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	e009      	b.n	8001fa4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3310      	adds	r3, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fef3 	bl	8001d80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3324      	adds	r3, #36	; 0x24
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff feee 	bl	8001d80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001fa4:	f002 f838 	bl	8004018 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001fa8:	2301      	movs	r3, #1
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	e000ed04 	.word	0xe000ed04

08001fb8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <xQueueGenericCreate+0x28>
 8001fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd0:	f383 8811 	msr	BASEPRI, r3
 8001fd4:	f3bf 8f6f 	isb	sy
 8001fd8:	f3bf 8f4f 	dsb	sy
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	e7fe      	b.n	8001fde <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	e004      	b.n	8001ff6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	fb02 f303 	mul.w	r3, r2, r3
 8001ff4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3350      	adds	r3, #80	; 0x50
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 f8f8 	bl	80041f0 <pvPortMalloc>
 8002000:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00d      	beq.n	8002024 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3350      	adds	r3, #80	; 0x50
 8002010:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002012:	79fa      	ldrb	r2, [r7, #7]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	4613      	mov	r3, r2
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f805 	bl	800202e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002024:	69bb      	ldr	r3, [r7, #24]
	}
 8002026:	4618      	mov	r0, r3
 8002028:	3720      	adds	r7, #32
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d103      	bne.n	800204a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e002      	b.n	8002050 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800205c:	2101      	movs	r1, #1
 800205e:	69b8      	ldr	r0, [r7, #24]
 8002060:	f7ff ff42 	bl	8001ee8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08e      	sub	sp, #56	; 0x38
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002082:	2300      	movs	r3, #0
 8002084:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800208a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <xQueueGenericSend+0x30>
 8002090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002094:	f383 8811 	msr	BASEPRI, r3
 8002098:	f3bf 8f6f 	isb	sy
 800209c:	f3bf 8f4f 	dsb	sy
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a2:	e7fe      	b.n	80020a2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <xQueueGenericSend+0x3e>
 80020aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <xQueueGenericSend+0x42>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <xQueueGenericSend+0x44>
 80020b6:	2300      	movs	r3, #0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d109      	bne.n	80020d0 <xQueueGenericSend+0x5c>
 80020bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c0:	f383 8811 	msr	BASEPRI, r3
 80020c4:	f3bf 8f6f 	isb	sy
 80020c8:	f3bf 8f4f 	dsb	sy
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
 80020ce:	e7fe      	b.n	80020ce <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d103      	bne.n	80020de <xQueueGenericSend+0x6a>
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <xQueueGenericSend+0x6e>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <xQueueGenericSend+0x70>
 80020e2:	2300      	movs	r3, #0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d109      	bne.n	80020fc <xQueueGenericSend+0x88>
 80020e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ec:	f383 8811 	msr	BASEPRI, r3
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	623b      	str	r3, [r7, #32]
 80020fa:	e7fe      	b.n	80020fa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020fc:	f001 fa1e 	bl	800353c <xTaskGetSchedulerState>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <xQueueGenericSend+0x98>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <xQueueGenericSend+0x9c>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <xQueueGenericSend+0x9e>
 8002110:	2300      	movs	r3, #0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <xQueueGenericSend+0xb6>
 8002116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211a:	f383 8811 	msr	BASEPRI, r3
 800211e:	f3bf 8f6f 	isb	sy
 8002122:	f3bf 8f4f 	dsb	sy
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	e7fe      	b.n	8002128 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800212a:	f001 ff47 	bl	8003fbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002136:	429a      	cmp	r2, r3
 8002138:	d302      	bcc.n	8002140 <xQueueGenericSend+0xcc>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d129      	bne.n	8002194 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002146:	f000 f9ff 	bl	8002548 <prvCopyDataToQueue>
 800214a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	2b00      	cmp	r3, #0
 8002152:	d010      	beq.n	8002176 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002156:	3324      	adds	r3, #36	; 0x24
 8002158:	4618      	mov	r0, r3
 800215a:	f001 f857 	bl	800320c <xTaskRemoveFromEventList>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002164:	4b3f      	ldr	r3, [pc, #252]	; (8002264 <xQueueGenericSend+0x1f0>)
 8002166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	f3bf 8f4f 	dsb	sy
 8002170:	f3bf 8f6f 	isb	sy
 8002174:	e00a      	b.n	800218c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800217c:	4b39      	ldr	r3, [pc, #228]	; (8002264 <xQueueGenericSend+0x1f0>)
 800217e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800218c:	f001 ff44 	bl	8004018 <vPortExitCritical>
				return pdPASS;
 8002190:	2301      	movs	r3, #1
 8002192:	e063      	b.n	800225c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d103      	bne.n	80021a2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800219a:	f001 ff3d 	bl	8004018 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	e05c      	b.n	800225c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d106      	bne.n	80021b6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4618      	mov	r0, r3
 80021ae:	f001 f88f 	bl	80032d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021b2:	2301      	movs	r3, #1
 80021b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021b6:	f001 ff2f 	bl	8004018 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021ba:	f000 fe0d 	bl	8002dd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021be:	f001 fefd 	bl	8003fbc <vPortEnterCritical>
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021ce:	d103      	bne.n	80021d8 <xQueueGenericSend+0x164>
 80021d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e4:	d103      	bne.n	80021ee <xQueueGenericSend+0x17a>
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021ee:	f001 ff13 	bl	8004018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021f2:	1d3a      	adds	r2, r7, #4
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f001 f87e 	bl	80032fc <xTaskCheckForTimeOut>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d124      	bne.n	8002250 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002208:	f000 fa96 	bl	8002738 <prvIsQueueFull>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d018      	beq.n	8002244 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002214:	3310      	adds	r3, #16
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f000 ffa8 	bl	8003170 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002222:	f000 fa21 	bl	8002668 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002226:	f000 fde5 	bl	8002df4 <xTaskResumeAll>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	f47f af7c 	bne.w	800212a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <xQueueGenericSend+0x1f0>)
 8002234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	f3bf 8f4f 	dsb	sy
 800223e:	f3bf 8f6f 	isb	sy
 8002242:	e772      	b.n	800212a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002246:	f000 fa0f 	bl	8002668 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800224a:	f000 fdd3 	bl	8002df4 <xTaskResumeAll>
 800224e:	e76c      	b.n	800212a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002252:	f000 fa09 	bl	8002668 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002256:	f000 fdcd 	bl	8002df4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800225a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800225c:	4618      	mov	r0, r3
 800225e:	3738      	adds	r7, #56	; 0x38
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	e000ed04 	.word	0xe000ed04

08002268 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08e      	sub	sp, #56	; 0x38
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	2b00      	cmp	r3, #0
 800227e:	d109      	bne.n	8002294 <xQueueGenericSendFromISR+0x2c>
 8002280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
 8002292:	e7fe      	b.n	8002292 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d103      	bne.n	80022a2 <xQueueGenericSendFromISR+0x3a>
 800229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <xQueueGenericSendFromISR+0x3e>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <xQueueGenericSendFromISR+0x40>
 80022a6:	2300      	movs	r3, #0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d109      	bne.n	80022c0 <xQueueGenericSendFromISR+0x58>
 80022ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	623b      	str	r3, [r7, #32]
 80022be:	e7fe      	b.n	80022be <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d103      	bne.n	80022ce <xQueueGenericSendFromISR+0x66>
 80022c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <xQueueGenericSendFromISR+0x6a>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <xQueueGenericSendFromISR+0x6c>
 80022d2:	2300      	movs	r3, #0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <xQueueGenericSendFromISR+0x84>
 80022d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022dc:	f383 8811 	msr	BASEPRI, r3
 80022e0:	f3bf 8f6f 	isb	sy
 80022e4:	f3bf 8f4f 	dsb	sy
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e7fe      	b.n	80022ea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80022ec:	f001 ff42 	bl	8004174 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80022f0:	f3ef 8211 	mrs	r2, BASEPRI
 80022f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f8:	f383 8811 	msr	BASEPRI, r3
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	f3bf 8f4f 	dsb	sy
 8002304:	61ba      	str	r2, [r7, #24]
 8002306:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002308:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002314:	429a      	cmp	r2, r3
 8002316:	d302      	bcc.n	800231e <xQueueGenericSendFromISR+0xb6>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d12c      	bne.n	8002378 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800232e:	f000 f90b 	bl	8002548 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002332:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800233a:	d112      	bne.n	8002362 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	2b00      	cmp	r3, #0
 8002342:	d016      	beq.n	8002372 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	3324      	adds	r3, #36	; 0x24
 8002348:	4618      	mov	r0, r3
 800234a:	f000 ff5f 	bl	800320c <xTaskRemoveFromEventList>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00e      	beq.n	8002372 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e007      	b.n	8002372 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002362:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002366:	3301      	adds	r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	b25a      	sxtb	r2, r3
 800236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002372:	2301      	movs	r3, #1
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002376:	e001      	b.n	800237c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002378:	2300      	movs	r3, #0
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
 800237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002388:	4618      	mov	r0, r3
 800238a:	3738      	adds	r7, #56	; 0x38
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08c      	sub	sp, #48	; 0x30
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800239c:	2300      	movs	r3, #0
 800239e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <xQueueReceive+0x2e>
	__asm volatile
 80023aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
 80023ba:	623b      	str	r3, [r7, #32]
 80023bc:	e7fe      	b.n	80023bc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d103      	bne.n	80023cc <xQueueReceive+0x3c>
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <xQueueReceive+0x40>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <xQueueReceive+0x42>
 80023d0:	2300      	movs	r3, #0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <xQueueReceive+0x5a>
 80023d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	e7fe      	b.n	80023e8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023ea:	f001 f8a7 	bl	800353c <xTaskGetSchedulerState>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <xQueueReceive+0x6a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <xQueueReceive+0x6e>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <xQueueReceive+0x70>
 80023fe:	2300      	movs	r3, #0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <xQueueReceive+0x88>
 8002404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	e7fe      	b.n	8002416 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002418:	f001 fdd0 	bl	8003fbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01f      	beq.n	8002468 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800242c:	f000 f8f6 	bl	800261c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	1e5a      	subs	r2, r3, #1
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00f      	beq.n	8002460 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	3310      	adds	r3, #16
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fee1 	bl	800320c <xTaskRemoveFromEventList>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002450:	4b3c      	ldr	r3, [pc, #240]	; (8002544 <xQueueReceive+0x1b4>)
 8002452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002460:	f001 fdda 	bl	8004018 <vPortExitCritical>
				return pdPASS;
 8002464:	2301      	movs	r3, #1
 8002466:	e069      	b.n	800253c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800246e:	f001 fdd3 	bl	8004018 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002472:	2300      	movs	r3, #0
 8002474:	e062      	b.n	800253c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d106      	bne.n	800248a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800247c:	f107 0310 	add.w	r3, r7, #16
 8002480:	4618      	mov	r0, r3
 8002482:	f000 ff25 	bl	80032d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002486:	2301      	movs	r3, #1
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800248a:	f001 fdc5 	bl	8004018 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800248e:	f000 fca3 	bl	8002dd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002492:	f001 fd93 	bl	8003fbc <vPortEnterCritical>
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800249c:	b25b      	sxtb	r3, r3
 800249e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024a2:	d103      	bne.n	80024ac <xQueueReceive+0x11c>
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024b2:	b25b      	sxtb	r3, r3
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b8:	d103      	bne.n	80024c2 <xQueueReceive+0x132>
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024c2:	f001 fda9 	bl	8004018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024c6:	1d3a      	adds	r2, r7, #4
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 ff14 	bl	80032fc <xTaskCheckForTimeOut>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d123      	bne.n	8002522 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024dc:	f000 f916 	bl	800270c <prvIsQueueEmpty>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d017      	beq.n	8002516 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	3324      	adds	r3, #36	; 0x24
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fe3e 	bl	8003170 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80024f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024f6:	f000 f8b7 	bl	8002668 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80024fa:	f000 fc7b 	bl	8002df4 <xTaskResumeAll>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d189      	bne.n	8002418 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <xQueueReceive+0x1b4>)
 8002506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	e780      	b.n	8002418 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002518:	f000 f8a6 	bl	8002668 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800251c:	f000 fc6a 	bl	8002df4 <xTaskResumeAll>
 8002520:	e77a      	b.n	8002418 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002524:	f000 f8a0 	bl	8002668 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002528:	f000 fc64 	bl	8002df4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800252c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800252e:	f000 f8ed 	bl	800270c <prvIsQueueEmpty>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	f43f af6f 	beq.w	8002418 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800253a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800253c:	4618      	mov	r0, r3
 800253e:	3730      	adds	r7, #48	; 0x30
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	e000ed04 	.word	0xe000ed04

08002548 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10d      	bne.n	8002582 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d14d      	bne.n	800260a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	4618      	mov	r0, r3
 8002574:	f001 f800 	bl	8003578 <xTaskPriorityDisinherit>
 8002578:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	e043      	b.n	800260a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d119      	bne.n	80025bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6858      	ldr	r0, [r3, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	461a      	mov	r2, r3
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	f002 f826 	bl	80045e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	441a      	add	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d32b      	bcc.n	800260a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	e026      	b.n	800260a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	68d8      	ldr	r0, [r3, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	461a      	mov	r2, r3
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	f002 f80c 	bl	80045e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	425b      	negs	r3, r3
 80025d6:	441a      	add	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d207      	bcs.n	80025f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	425b      	negs	r3, r3
 80025f2:	441a      	add	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d105      	bne.n	800260a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	3b01      	subs	r3, #1
 8002608:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002612:	697b      	ldr	r3, [r7, #20]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d018      	beq.n	8002660 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	441a      	add	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	429a      	cmp	r2, r3
 8002646:	d303      	bcc.n	8002650 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68d9      	ldr	r1, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	461a      	mov	r2, r3
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	f001 ffc2 	bl	80045e4 <memcpy>
	}
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002670:	f001 fca4 	bl	8003fbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800267a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800267c:	e011      	b.n	80026a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	2b00      	cmp	r3, #0
 8002684:	d012      	beq.n	80026ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3324      	adds	r3, #36	; 0x24
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fdbe 	bl	800320c <xTaskRemoveFromEventList>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002696:	f000 fe91 	bl	80033bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	3b01      	subs	r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	dce9      	bgt.n	800267e <prvUnlockQueue+0x16>
 80026aa:	e000      	b.n	80026ae <prvUnlockQueue+0x46>
					break;
 80026ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	22ff      	movs	r2, #255	; 0xff
 80026b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80026b6:	f001 fcaf 	bl	8004018 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80026ba:	f001 fc7f 	bl	8003fbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80026c6:	e011      	b.n	80026ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d012      	beq.n	80026f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3310      	adds	r3, #16
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 fd99 	bl	800320c <xTaskRemoveFromEventList>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80026e0:	f000 fe6c 	bl	80033bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80026e4:	7bbb      	ldrb	r3, [r7, #14]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80026ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	dce9      	bgt.n	80026c8 <prvUnlockQueue+0x60>
 80026f4:	e000      	b.n	80026f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80026f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	22ff      	movs	r2, #255	; 0xff
 80026fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002700:	f001 fc8a 	bl	8004018 <vPortExitCritical>
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002714:	f001 fc52 	bl	8003fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002720:	2301      	movs	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	e001      	b.n	800272a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800272a:	f001 fc75 	bl	8004018 <vPortExitCritical>

	return xReturn;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002740:	f001 fc3c 	bl	8003fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	429a      	cmp	r2, r3
 800274e:	d102      	bne.n	8002756 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002750:	2301      	movs	r3, #1
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	e001      	b.n	800275a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800275a:	f001 fc5d 	bl	8004018 <vPortExitCritical>

	return xReturn;
 800275e:	68fb      	ldr	r3, [r7, #12]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e014      	b.n	80027a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <vQueueAddToRegistry+0x4c>)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10b      	bne.n	800279c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002784:	490b      	ldr	r1, [pc, #44]	; (80027b4 <vQueueAddToRegistry+0x4c>)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <vQueueAddToRegistry+0x4c>)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800279a:	e005      	b.n	80027a8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3301      	adds	r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b07      	cmp	r3, #7
 80027a6:	d9e7      	bls.n	8002778 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	20012de8 	.word	0x20012de8

080027b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80027c8:	f001 fbf8 	bl	8003fbc <vPortEnterCritical>
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027d2:	b25b      	sxtb	r3, r3
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d8:	d103      	bne.n	80027e2 <vQueueWaitForMessageRestricted+0x2a>
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027e8:	b25b      	sxtb	r3, r3
 80027ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ee:	d103      	bne.n	80027f8 <vQueueWaitForMessageRestricted+0x40>
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027f8:	f001 fc0e 	bl	8004018 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	2b00      	cmp	r3, #0
 8002802:	d106      	bne.n	8002812 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3324      	adds	r3, #36	; 0x24
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fcd3 	bl	80031b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7ff ff28 	bl	8002668 <prvUnlockQueue>
	}
 8002818:	bf00      	nop
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08c      	sub	sp, #48	; 0x30
 8002824:	af04      	add	r7, sp, #16
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	4613      	mov	r3, r2
 800282e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4618      	mov	r0, r3
 8002836:	f001 fcdb 	bl	80041f0 <pvPortMalloc>
 800283a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00e      	beq.n	8002860 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002842:	2058      	movs	r0, #88	; 0x58
 8002844:	f001 fcd4 	bl	80041f0 <pvPortMalloc>
 8002848:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
 8002856:	e005      	b.n	8002864 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002858:	6978      	ldr	r0, [r7, #20]
 800285a:	f001 fd8b 	bl	8004374 <vPortFree>
 800285e:	e001      	b.n	8002864 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d013      	beq.n	8002892 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	2300      	movs	r3, #0
 800286e:	9303      	str	r3, [sp, #12]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	9302      	str	r3, [sp, #8]
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f80e 	bl	80028a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002886:	69f8      	ldr	r0, [r7, #28]
 8002888:	f000 f89a 	bl	80029c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800288c:	2301      	movs	r3, #1
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	e002      	b.n	8002898 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002896:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002898:	69bb      	ldr	r3, [r7, #24]
	}
 800289a:	4618      	mov	r0, r3
 800289c:	3720      	adds	r7, #32
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b088      	sub	sp, #32
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	461a      	mov	r2, r3
 80028ba:	21a5      	movs	r1, #165	; 0xa5
 80028bc:	f001 fe9d 	bl	80045fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028ca:	3b01      	subs	r3, #1
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f023 0307 	bic.w	r3, r3, #7
 80028d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d009      	beq.n	80028f8 <prvInitialiseNewTask+0x56>
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	e7fe      	b.n	80028f6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01f      	beq.n	800293e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	e012      	b.n	800292a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	4413      	add	r3, r2
 800290a:	7819      	ldrb	r1, [r3, #0]
 800290c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	4413      	add	r3, r2
 8002912:	3334      	adds	r3, #52	; 0x34
 8002914:	460a      	mov	r2, r1
 8002916:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d006      	beq.n	8002932 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	3301      	adds	r3, #1
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	2b09      	cmp	r3, #9
 800292e:	d9e9      	bls.n	8002904 <prvInitialiseNewTask+0x62>
 8002930:	e000      	b.n	8002934 <prvInitialiseNewTask+0x92>
			{
				break;
 8002932:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800293c:	e003      	b.n	8002946 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	2b04      	cmp	r3, #4
 800294a:	d901      	bls.n	8002950 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800294c:	2304      	movs	r3, #4
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002954:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800295a:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	2200      	movs	r2, #0
 8002960:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	3304      	adds	r3, #4
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fa2a 	bl	8001dc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296e:	3318      	adds	r3, #24
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fa25 	bl	8001dc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800297a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	f1c3 0205 	rsb	r2, r3, #5
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	2200      	movs	r2, #0
 8002990:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	68f9      	ldr	r1, [r7, #12]
 800299e:	69b8      	ldr	r0, [r7, #24]
 80029a0:	f001 f9e2 	bl	8003d68 <pxPortInitialiseStack>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029b6:	bf00      	nop
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80029c8:	f001 faf8 	bl	8003fbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80029cc:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <prvAddNewTaskToReadyList+0xc0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	4a2b      	ldr	r2, [pc, #172]	; (8002a80 <prvAddNewTaskToReadyList+0xc0>)
 80029d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80029d6:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <prvAddNewTaskToReadyList+0xc4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80029de:	4a29      	ldr	r2, [pc, #164]	; (8002a84 <prvAddNewTaskToReadyList+0xc4>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029e4:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <prvAddNewTaskToReadyList+0xc0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d110      	bne.n	8002a0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029ec:	f000 fd0a 	bl	8003404 <prvInitialiseTaskLists>
 80029f0:	e00d      	b.n	8002a0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029f2:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <prvAddNewTaskToReadyList+0xc8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <prvAddNewTaskToReadyList+0xc4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d802      	bhi.n	8002a0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a08:	4a1e      	ldr	r2, [pc, #120]	; (8002a84 <prvAddNewTaskToReadyList+0xc4>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a0e:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <prvAddNewTaskToReadyList+0xcc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3301      	adds	r3, #1
 8002a14:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <prvAddNewTaskToReadyList+0xcc>)
 8002a16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a18:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <prvAddNewTaskToReadyList+0xcc>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	2201      	movs	r2, #1
 8002a26:	409a      	lsls	r2, r3
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <prvAddNewTaskToReadyList+0xd0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <prvAddNewTaskToReadyList+0xd0>)
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4a15      	ldr	r2, [pc, #84]	; (8002a94 <prvAddNewTaskToReadyList+0xd4>)
 8002a40:	441a      	add	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3304      	adds	r3, #4
 8002a46:	4619      	mov	r1, r3
 8002a48:	4610      	mov	r0, r2
 8002a4a:	f7ff f9c6 	bl	8001dda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a4e:	f001 fae3 	bl	8004018 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <prvAddNewTaskToReadyList+0xc8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00e      	beq.n	8002a78 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <prvAddNewTaskToReadyList+0xc4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d207      	bcs.n	8002a78 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <prvAddNewTaskToReadyList+0xd8>)
 8002a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000104 	.word	0x20000104
 8002a84:	2000002c 	.word	0x2000002c
 8002a88:	20000110 	.word	0x20000110
 8002a8c:	20000120 	.word	0x20000120
 8002a90:	2000010c 	.word	0x2000010c
 8002a94:	20000030 	.word	0x20000030
 8002a98:	e000ed04 	.word	0xe000ed04

08002a9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d016      	beq.n	8002adc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <vTaskDelay+0x60>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <vTaskDelay+0x2e>
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	e7fe      	b.n	8002ac8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002aca:	f000 f985 	bl	8002dd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ace:	2100      	movs	r1, #0
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fdd5 	bl	8003680 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ad6:	f000 f98d 	bl	8002df4 <xTaskResumeAll>
 8002ada:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d107      	bne.n	8002af2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <vTaskDelay+0x64>)
 8002ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	2000012c 	.word	0x2000012c
 8002b00:	e000ed04 	.word	0xe000ed04

08002b04 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002b0c:	f001 fa56 	bl	8003fbc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d102      	bne.n	8002b1c <vTaskSuspend+0x18>
 8002b16:	4b3c      	ldr	r3, [pc, #240]	; (8002c08 <vTaskSuspend+0x104>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	e000      	b.n	8002b1e <vTaskSuspend+0x1a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	3304      	adds	r3, #4
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff f9b5 	bl	8001e94 <uxListRemove>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d115      	bne.n	8002b5c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b34:	4935      	ldr	r1, [pc, #212]	; (8002c0c <vTaskSuspend+0x108>)
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10a      	bne.n	8002b5c <vTaskSuspend+0x58>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43da      	mvns	r2, r3
 8002b52:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <vTaskSuspend+0x10c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4013      	ands	r3, r2
 8002b58:	4a2d      	ldr	r2, [pc, #180]	; (8002c10 <vTaskSuspend+0x10c>)
 8002b5a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3318      	adds	r3, #24
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff f993 	bl	8001e94 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3304      	adds	r3, #4
 8002b72:	4619      	mov	r1, r3
 8002b74:	4827      	ldr	r0, [pc, #156]	; (8002c14 <vTaskSuspend+0x110>)
 8002b76:	f7ff f930 	bl	8001dda <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d103      	bne.n	8002b8e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8002b8e:	f001 fa43 	bl	8004018 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <vTaskSuspend+0x114>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8002b9a:	f001 fa0f 	bl	8003fbc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8002b9e:	f000 fcad 	bl	80034fc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8002ba2:	f001 fa39 	bl	8004018 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <vTaskSuspend+0x104>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d126      	bne.n	8002bfe <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8002bb0:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <vTaskSuspend+0x114>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d016      	beq.n	8002be6 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8002bb8:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <vTaskSuspend+0x118>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <vTaskSuspend+0xd0>
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	e7fe      	b.n	8002bd2 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <vTaskSuspend+0x11c>)
 8002bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002be4:	e00b      	b.n	8002bfe <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <vTaskSuspend+0x110>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <vTaskSuspend+0x120>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d103      	bne.n	8002bfa <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <vTaskSuspend+0x104>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
	}
 8002bf8:	e001      	b.n	8002bfe <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8002bfa:	f000 fa5f 	bl	80030bc <vTaskSwitchContext>
	}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	2000002c 	.word	0x2000002c
 8002c0c:	20000030 	.word	0x20000030
 8002c10:	2000010c 	.word	0x2000010c
 8002c14:	200000f0 	.word	0x200000f0
 8002c18:	20000110 	.word	0x20000110
 8002c1c:	2000012c 	.word	0x2000012c
 8002c20:	e000ed04 	.word	0xe000ed04
 8002c24:	20000104 	.word	0x20000104

08002c28 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <prvTaskIsTaskSuspended+0x2a>
 8002c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e7fe      	b.n	8002c50 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <prvTaskIsTaskSuspended+0x58>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d10a      	bne.n	8002c72 <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	4a08      	ldr	r2, [pc, #32]	; (8002c84 <prvTaskIsTaskSuspended+0x5c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d005      	beq.n	8002c72 <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002c72:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002c74:	4618      	mov	r0, r3
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	200000f0 	.word	0x200000f0
 8002c84:	200000c4 	.word	0x200000c4

08002c88 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <vTaskResume+0x26>
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	e7fe      	b.n	8002cac <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8002cae:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <vTaskResume+0xa8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d037      	beq.n	8002d28 <vTaskResume+0xa0>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d034      	beq.n	8002d28 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8002cbe:	f001 f97d 	bl	8003fbc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f7ff ffb0 	bl	8002c28 <prvTaskIsTaskSuspended>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d02a      	beq.n	8002d24 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff f8de 	bl	8001e94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	2201      	movs	r2, #1
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <vTaskResume+0xac>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <vTaskResume+0xac>)
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4a10      	ldr	r2, [pc, #64]	; (8002d38 <vTaskResume+0xb0>)
 8002cf8:	441a      	add	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4610      	mov	r0, r2
 8002d02:	f7ff f86a 	bl	8001dda <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <vTaskResume+0xa8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d307      	bcc.n	8002d24 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <vTaskResume+0xb4>)
 8002d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8002d24:	f001 f978 	bl	8004018 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	2000002c 	.word	0x2000002c
 8002d34:	2000010c 	.word	0x2000010c
 8002d38:	20000030 	.word	0x20000030
 8002d3c:	e000ed04 	.word	0xe000ed04

08002d40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002d46:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <vTaskStartScheduler+0x80>)
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2282      	movs	r2, #130	; 0x82
 8002d52:	491c      	ldr	r1, [pc, #112]	; (8002dc4 <vTaskStartScheduler+0x84>)
 8002d54:	481c      	ldr	r0, [pc, #112]	; (8002dc8 <vTaskStartScheduler+0x88>)
 8002d56:	f7ff fd63 	bl	8002820 <xTaskCreate>
 8002d5a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d102      	bne.n	8002d68 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8002d62:	f000 fcf3 	bl	800374c <xTimerCreateTimerTask>
 8002d66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d115      	bne.n	8002d9a <vTaskStartScheduler+0x5a>
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <vTaskStartScheduler+0x8c>)
 8002d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <vTaskStartScheduler+0x90>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <vTaskStartScheduler+0x94>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d94:	f001 f874 	bl	8003e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d98:	e00d      	b.n	8002db6 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da0:	d109      	bne.n	8002db6 <vTaskStartScheduler+0x76>
 8002da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	e7fe      	b.n	8002db4 <vTaskStartScheduler+0x74>
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000128 	.word	0x20000128
 8002dc4:	08004648 	.word	0x08004648
 8002dc8:	080033d5 	.word	0x080033d5
 8002dcc:	20000124 	.word	0x20000124
 8002dd0:	20000110 	.word	0x20000110
 8002dd4:	20000108 	.word	0x20000108

08002dd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <vTaskSuspendAll+0x18>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	4a03      	ldr	r2, [pc, #12]	; (8002df0 <vTaskSuspendAll+0x18>)
 8002de4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	2000012c 	.word	0x2000012c

08002df4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e02:	4b41      	ldr	r3, [pc, #260]	; (8002f08 <xTaskResumeAll+0x114>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <xTaskResumeAll+0x2a>
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	e7fe      	b.n	8002e1c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e1e:	f001 f8cd 	bl	8003fbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e22:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <xTaskResumeAll+0x114>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	4a37      	ldr	r2, [pc, #220]	; (8002f08 <xTaskResumeAll+0x114>)
 8002e2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e2c:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <xTaskResumeAll+0x114>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d161      	bne.n	8002ef8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e34:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <xTaskResumeAll+0x118>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d05d      	beq.n	8002ef8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e3c:	e02e      	b.n	8002e9c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e3e:	4b34      	ldr	r3, [pc, #208]	; (8002f10 <xTaskResumeAll+0x11c>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3318      	adds	r3, #24
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff f822 	bl	8001e94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3304      	adds	r3, #4
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff f81d 	bl	8001e94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	2201      	movs	r2, #1
 8002e60:	409a      	lsls	r2, r3
 8002e62:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <xTaskResumeAll+0x120>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	4a2a      	ldr	r2, [pc, #168]	; (8002f14 <xTaskResumeAll+0x120>)
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4a27      	ldr	r2, [pc, #156]	; (8002f18 <xTaskResumeAll+0x124>)
 8002e7a:	441a      	add	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4610      	mov	r0, r2
 8002e84:	f7fe ffa9 	bl	8001dda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8c:	4b23      	ldr	r3, [pc, #140]	; (8002f1c <xTaskResumeAll+0x128>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d302      	bcc.n	8002e9c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002e96:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <xTaskResumeAll+0x12c>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e9c:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <xTaskResumeAll+0x11c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1cc      	bne.n	8002e3e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002eaa:	f000 fb27 	bl	80034fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002eae:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <xTaskResumeAll+0x130>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d010      	beq.n	8002edc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002eba:	f000 f847 	bl	8002f4c <xTaskIncrementTick>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002ec4:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <xTaskResumeAll+0x12c>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f1      	bne.n	8002eba <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <xTaskResumeAll+0x130>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <xTaskResumeAll+0x12c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d009      	beq.n	8002ef8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <xTaskResumeAll+0x134>)
 8002eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ef8:	f001 f88e 	bl	8004018 <vPortExitCritical>

	return xAlreadyYielded;
 8002efc:	68bb      	ldr	r3, [r7, #8]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	2000012c 	.word	0x2000012c
 8002f0c:	20000104 	.word	0x20000104
 8002f10:	200000c4 	.word	0x200000c4
 8002f14:	2000010c 	.word	0x2000010c
 8002f18:	20000030 	.word	0x20000030
 8002f1c:	2000002c 	.word	0x2000002c
 8002f20:	20000118 	.word	0x20000118
 8002f24:	20000114 	.word	0x20000114
 8002f28:	e000ed04 	.word	0xe000ed04

08002f2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <xTaskGetTickCount+0x1c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f38:	687b      	ldr	r3, [r7, #4]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000108 	.word	0x20000108

08002f4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f56:	4b4e      	ldr	r3, [pc, #312]	; (8003090 <xTaskIncrementTick+0x144>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 8087 	bne.w	800306e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f60:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <xTaskIncrementTick+0x148>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f68:	4a4a      	ldr	r2, [pc, #296]	; (8003094 <xTaskIncrementTick+0x148>)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d11f      	bne.n	8002fb4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f74:	4b48      	ldr	r3, [pc, #288]	; (8003098 <xTaskIncrementTick+0x14c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <xTaskIncrementTick+0x46>
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	e7fe      	b.n	8002f90 <xTaskIncrementTick+0x44>
 8002f92:	4b41      	ldr	r3, [pc, #260]	; (8003098 <xTaskIncrementTick+0x14c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	4b40      	ldr	r3, [pc, #256]	; (800309c <xTaskIncrementTick+0x150>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a3e      	ldr	r2, [pc, #248]	; (8003098 <xTaskIncrementTick+0x14c>)
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4a3e      	ldr	r2, [pc, #248]	; (800309c <xTaskIncrementTick+0x150>)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	4b3e      	ldr	r3, [pc, #248]	; (80030a0 <xTaskIncrementTick+0x154>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3301      	adds	r3, #1
 8002fac:	4a3c      	ldr	r2, [pc, #240]	; (80030a0 <xTaskIncrementTick+0x154>)
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	f000 faa4 	bl	80034fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fb4:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <xTaskIncrementTick+0x158>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d348      	bcc.n	8003050 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fbe:	4b36      	ldr	r3, [pc, #216]	; (8003098 <xTaskIncrementTick+0x14c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d104      	bne.n	8002fd2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fc8:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <xTaskIncrementTick+0x158>)
 8002fca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fce:	601a      	str	r2, [r3, #0]
					break;
 8002fd0:	e03e      	b.n	8003050 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fd2:	4b31      	ldr	r3, [pc, #196]	; (8003098 <xTaskIncrementTick+0x14c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d203      	bcs.n	8002ff2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002fea:	4a2e      	ldr	r2, [pc, #184]	; (80030a4 <xTaskIncrementTick+0x158>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ff0:	e02e      	b.n	8003050 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe ff4c 	bl	8001e94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	d004      	beq.n	800300e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	3318      	adds	r3, #24
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe ff43 	bl	8001e94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	2201      	movs	r2, #1
 8003014:	409a      	lsls	r2, r3
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <xTaskIncrementTick+0x15c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	4a22      	ldr	r2, [pc, #136]	; (80030a8 <xTaskIncrementTick+0x15c>)
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4a1f      	ldr	r2, [pc, #124]	; (80030ac <xTaskIncrementTick+0x160>)
 800302e:	441a      	add	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f7fe fecf 	bl	8001dda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <xTaskIncrementTick+0x164>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	429a      	cmp	r2, r3
 8003048:	d3b9      	bcc.n	8002fbe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800304a:	2301      	movs	r3, #1
 800304c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800304e:	e7b6      	b.n	8002fbe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003050:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <xTaskIncrementTick+0x164>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003056:	4915      	ldr	r1, [pc, #84]	; (80030ac <xTaskIncrementTick+0x160>)
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d907      	bls.n	8003078 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003068:	2301      	movs	r3, #1
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	e004      	b.n	8003078 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800306e:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <xTaskIncrementTick+0x168>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3301      	adds	r3, #1
 8003074:	4a0f      	ldr	r2, [pc, #60]	; (80030b4 <xTaskIncrementTick+0x168>)
 8003076:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <xTaskIncrementTick+0x16c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003080:	2301      	movs	r3, #1
 8003082:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003084:	697b      	ldr	r3, [r7, #20]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	2000012c 	.word	0x2000012c
 8003094:	20000108 	.word	0x20000108
 8003098:	200000bc 	.word	0x200000bc
 800309c:	200000c0 	.word	0x200000c0
 80030a0:	2000011c 	.word	0x2000011c
 80030a4:	20000124 	.word	0x20000124
 80030a8:	2000010c 	.word	0x2000010c
 80030ac:	20000030 	.word	0x20000030
 80030b0:	2000002c 	.word	0x2000002c
 80030b4:	20000114 	.word	0x20000114
 80030b8:	20000118 	.word	0x20000118

080030bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030c2:	4b26      	ldr	r3, [pc, #152]	; (800315c <vTaskSwitchContext+0xa0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030ca:	4b25      	ldr	r3, [pc, #148]	; (8003160 <vTaskSwitchContext+0xa4>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030d0:	e03e      	b.n	8003150 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80030d2:	4b23      	ldr	r3, [pc, #140]	; (8003160 <vTaskSwitchContext+0xa4>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030d8:	4b22      	ldr	r3, [pc, #136]	; (8003164 <vTaskSwitchContext+0xa8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	fab3 f383 	clz	r3, r3
 80030e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80030e6:	7afb      	ldrb	r3, [r7, #11]
 80030e8:	f1c3 031f 	rsb	r3, r3, #31
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	491e      	ldr	r1, [pc, #120]	; (8003168 <vTaskSwitchContext+0xac>)
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	e7fe      	b.n	8003114 <vTaskSwitchContext+0x58>
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4a11      	ldr	r2, [pc, #68]	; (8003168 <vTaskSwitchContext+0xac>)
 8003122:	4413      	add	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	605a      	str	r2, [r3, #4]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	3308      	adds	r3, #8
 8003138:	429a      	cmp	r2, r3
 800313a:	d104      	bne.n	8003146 <vTaskSwitchContext+0x8a>
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a07      	ldr	r2, [pc, #28]	; (800316c <vTaskSwitchContext+0xb0>)
 800314e:	6013      	str	r3, [r2, #0]
}
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	2000012c 	.word	0x2000012c
 8003160:	20000118 	.word	0x20000118
 8003164:	2000010c 	.word	0x2000010c
 8003168:	20000030 	.word	0x20000030
 800316c:	2000002c 	.word	0x2000002c

08003170 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d109      	bne.n	8003194 <vTaskPlaceOnEventList+0x24>
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	e7fe      	b.n	8003192 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <vTaskPlaceOnEventList+0x44>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3318      	adds	r3, #24
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7fe fe40 	bl	8001e22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031a2:	2101      	movs	r1, #1
 80031a4:	6838      	ldr	r0, [r7, #0]
 80031a6:	f000 fa6b 	bl	8003680 <prvAddCurrentTaskToDelayedList>
}
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	2000002c 	.word	0x2000002c

080031b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d109      	bne.n	80031de <vTaskPlaceOnEventListRestricted+0x26>
 80031ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	e7fe      	b.n	80031dc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <vTaskPlaceOnEventListRestricted+0x50>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3318      	adds	r3, #24
 80031e4:	4619      	mov	r1, r3
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7fe fdf7 	bl	8001dda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	68b8      	ldr	r0, [r7, #8]
 80031fc:	f000 fa40 	bl	8003680 <prvAddCurrentTaskToDelayedList>
	}
 8003200:	bf00      	nop
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	2000002c 	.word	0x2000002c

0800320c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <xTaskRemoveFromEventList+0x2a>
 8003222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	e7fe      	b.n	8003234 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	3318      	adds	r3, #24
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fe2a 	bl	8001e94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003240:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <xTaskRemoveFromEventList+0xac>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d11c      	bne.n	8003282 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	3304      	adds	r3, #4
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe fe21 	bl	8001e94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	2201      	movs	r2, #1
 8003258:	409a      	lsls	r2, r3
 800325a:	4b18      	ldr	r3, [pc, #96]	; (80032bc <xTaskRemoveFromEventList+0xb0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4313      	orrs	r3, r2
 8003260:	4a16      	ldr	r2, [pc, #88]	; (80032bc <xTaskRemoveFromEventList+0xb0>)
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <xTaskRemoveFromEventList+0xb4>)
 8003272:	441a      	add	r2, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	3304      	adds	r3, #4
 8003278:	4619      	mov	r1, r3
 800327a:	4610      	mov	r0, r2
 800327c:	f7fe fdad 	bl	8001dda <vListInsertEnd>
 8003280:	e005      	b.n	800328e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	3318      	adds	r3, #24
 8003286:	4619      	mov	r1, r3
 8003288:	480e      	ldr	r0, [pc, #56]	; (80032c4 <xTaskRemoveFromEventList+0xb8>)
 800328a:	f7fe fda6 	bl	8001dda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003292:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <xTaskRemoveFromEventList+0xbc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	429a      	cmp	r2, r3
 800329a:	d905      	bls.n	80032a8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800329c:	2301      	movs	r3, #1
 800329e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80032a0:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <xTaskRemoveFromEventList+0xc0>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e001      	b.n	80032ac <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80032ac:	697b      	ldr	r3, [r7, #20]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	2000012c 	.word	0x2000012c
 80032bc:	2000010c 	.word	0x2000010c
 80032c0:	20000030 	.word	0x20000030
 80032c4:	200000c4 	.word	0x200000c4
 80032c8:	2000002c 	.word	0x2000002c
 80032cc:	20000118 	.word	0x20000118

080032d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <vTaskInternalSetTimeOutState+0x24>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <vTaskInternalSetTimeOutState+0x28>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	605a      	str	r2, [r3, #4]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	2000011c 	.word	0x2000011c
 80032f8:	20000108 	.word	0x20000108

080032fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <xTaskCheckForTimeOut+0x24>
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	e7fe      	b.n	800331e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <xTaskCheckForTimeOut+0x3e>
 8003326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e7fe      	b.n	8003338 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800333a:	f000 fe3f 	bl	8003fbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800333e:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <xTaskCheckForTimeOut+0xb8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003356:	d102      	bne.n	800335e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003358:	2300      	movs	r3, #0
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	e023      	b.n	80033a6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <xTaskCheckForTimeOut+0xbc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d007      	beq.n	800337a <xTaskCheckForTimeOut+0x7e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	429a      	cmp	r2, r3
 8003372:	d302      	bcc.n	800337a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003374:	2301      	movs	r3, #1
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	e015      	b.n	80033a6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	429a      	cmp	r2, r3
 8003382:	d20b      	bcs.n	800339c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	1ad2      	subs	r2, r2, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff9d 	bl	80032d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	e004      	b.n	80033a6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80033a2:	2301      	movs	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80033a6:	f000 fe37 	bl	8004018 <vPortExitCritical>

	return xReturn;
 80033aa:	69fb      	ldr	r3, [r7, #28]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3720      	adds	r7, #32
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000108 	.word	0x20000108
 80033b8:	2000011c 	.word	0x2000011c

080033bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <vTaskMissedYield+0x14>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	20000118 	.word	0x20000118

080033d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033dc:	f000 f852 	bl	8003484 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <prvIdleTask+0x28>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d9f9      	bls.n	80033dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <prvIdleTask+0x2c>)
 80033ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80033f8:	e7f0      	b.n	80033dc <prvIdleTask+0x8>
 80033fa:	bf00      	nop
 80033fc:	20000030 	.word	0x20000030
 8003400:	e000ed04 	.word	0xe000ed04

08003404 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800340a:	2300      	movs	r3, #0
 800340c:	607b      	str	r3, [r7, #4]
 800340e:	e00c      	b.n	800342a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4a12      	ldr	r2, [pc, #72]	; (8003464 <prvInitialiseTaskLists+0x60>)
 800341c:	4413      	add	r3, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe fcae 	bl	8001d80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3301      	adds	r3, #1
 8003428:	607b      	str	r3, [r7, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b04      	cmp	r3, #4
 800342e:	d9ef      	bls.n	8003410 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003430:	480d      	ldr	r0, [pc, #52]	; (8003468 <prvInitialiseTaskLists+0x64>)
 8003432:	f7fe fca5 	bl	8001d80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003436:	480d      	ldr	r0, [pc, #52]	; (800346c <prvInitialiseTaskLists+0x68>)
 8003438:	f7fe fca2 	bl	8001d80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800343c:	480c      	ldr	r0, [pc, #48]	; (8003470 <prvInitialiseTaskLists+0x6c>)
 800343e:	f7fe fc9f 	bl	8001d80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003442:	480c      	ldr	r0, [pc, #48]	; (8003474 <prvInitialiseTaskLists+0x70>)
 8003444:	f7fe fc9c 	bl	8001d80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003448:	480b      	ldr	r0, [pc, #44]	; (8003478 <prvInitialiseTaskLists+0x74>)
 800344a:	f7fe fc99 	bl	8001d80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <prvInitialiseTaskLists+0x78>)
 8003450:	4a05      	ldr	r2, [pc, #20]	; (8003468 <prvInitialiseTaskLists+0x64>)
 8003452:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <prvInitialiseTaskLists+0x7c>)
 8003456:	4a05      	ldr	r2, [pc, #20]	; (800346c <prvInitialiseTaskLists+0x68>)
 8003458:	601a      	str	r2, [r3, #0]
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000030 	.word	0x20000030
 8003468:	20000094 	.word	0x20000094
 800346c:	200000a8 	.word	0x200000a8
 8003470:	200000c4 	.word	0x200000c4
 8003474:	200000d8 	.word	0x200000d8
 8003478:	200000f0 	.word	0x200000f0
 800347c:	200000bc 	.word	0x200000bc
 8003480:	200000c0 	.word	0x200000c0

08003484 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800348a:	e019      	b.n	80034c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800348c:	f000 fd96 	bl	8003fbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <prvCheckTasksWaitingTermination+0x4c>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe fcf9 	bl	8001e94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <prvCheckTasksWaitingTermination+0x50>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <prvCheckTasksWaitingTermination+0x50>)
 80034aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <prvCheckTasksWaitingTermination+0x54>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <prvCheckTasksWaitingTermination+0x54>)
 80034b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034b6:	f000 fdaf 	bl	8004018 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f80e 	bl	80034dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <prvCheckTasksWaitingTermination+0x54>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1e1      	bne.n	800348c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	200000d8 	.word	0x200000d8
 80034d4:	20000104 	.word	0x20000104
 80034d8:	200000ec 	.word	0x200000ec

080034dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 ff43 	bl	8004374 <vPortFree>
			vPortFree( pxTCB );
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 ff40 	bl	8004374 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <prvResetNextTaskUnblockTime+0x38>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <prvResetNextTaskUnblockTime+0x3c>)
 800350e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003512:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003514:	e008      	b.n	8003528 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003516:	4b07      	ldr	r3, [pc, #28]	; (8003534 <prvResetNextTaskUnblockTime+0x38>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a04      	ldr	r2, [pc, #16]	; (8003538 <prvResetNextTaskUnblockTime+0x3c>)
 8003526:	6013      	str	r3, [r2, #0]
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	200000bc 	.word	0x200000bc
 8003538:	20000124 	.word	0x20000124

0800353c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <xTaskGetSchedulerState+0x34>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800354a:	2301      	movs	r3, #1
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	e008      	b.n	8003562 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <xTaskGetSchedulerState+0x38>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003558:	2302      	movs	r3, #2
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	e001      	b.n	8003562 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003562:	687b      	ldr	r3, [r7, #4]
	}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	20000110 	.word	0x20000110
 8003574:	2000012c 	.word	0x2000012c

08003578 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d06c      	beq.n	8003668 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800358e:	4b39      	ldr	r3, [pc, #228]	; (8003674 <xTaskPriorityDisinherit+0xfc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	429a      	cmp	r2, r3
 8003596:	d009      	beq.n	80035ac <xTaskPriorityDisinherit+0x34>
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	e7fe      	b.n	80035aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d109      	bne.n	80035c8 <xTaskPriorityDisinherit+0x50>
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	e7fe      	b.n	80035c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035cc:	1e5a      	subs	r2, r3, #1
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035da:	429a      	cmp	r2, r3
 80035dc:	d044      	beq.n	8003668 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d140      	bne.n	8003668 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	3304      	adds	r3, #4
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fc52 	bl	8001e94 <uxListRemove>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d115      	bne.n	8003622 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fa:	491f      	ldr	r1, [pc, #124]	; (8003678 <xTaskPriorityDisinherit+0x100>)
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <xTaskPriorityDisinherit+0xaa>
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	2201      	movs	r2, #1
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43da      	mvns	r2, r3
 8003618:	4b18      	ldr	r3, [pc, #96]	; (800367c <xTaskPriorityDisinherit+0x104>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4013      	ands	r3, r2
 800361e:	4a17      	ldr	r2, [pc, #92]	; (800367c <xTaskPriorityDisinherit+0x104>)
 8003620:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	f1c3 0205 	rsb	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	2201      	movs	r2, #1
 800363c:	409a      	lsls	r2, r3
 800363e:	4b0f      	ldr	r3, [pc, #60]	; (800367c <xTaskPriorityDisinherit+0x104>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4313      	orrs	r3, r2
 8003644:	4a0d      	ldr	r2, [pc, #52]	; (800367c <xTaskPriorityDisinherit+0x104>)
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4a08      	ldr	r2, [pc, #32]	; (8003678 <xTaskPriorityDisinherit+0x100>)
 8003656:	441a      	add	r2, r3
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	3304      	adds	r3, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4610      	mov	r0, r2
 8003660:	f7fe fbbb 	bl	8001dda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003664:	2301      	movs	r3, #1
 8003666:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003668:	697b      	ldr	r3, [r7, #20]
	}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	2000002c 	.word	0x2000002c
 8003678:	20000030 	.word	0x20000030
 800367c:	2000010c 	.word	0x2000010c

08003680 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800368a:	4b29      	ldr	r3, [pc, #164]	; (8003730 <prvAddCurrentTaskToDelayedList+0xb0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3304      	adds	r3, #4
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe fbfc 	bl	8001e94 <uxListRemove>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10b      	bne.n	80036ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80036a2:	4b24      	ldr	r3, [pc, #144]	; (8003734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	2201      	movs	r2, #1
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43da      	mvns	r2, r3
 80036b0:	4b21      	ldr	r3, [pc, #132]	; (8003738 <prvAddCurrentTaskToDelayedList+0xb8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4013      	ands	r3, r2
 80036b6:	4a20      	ldr	r2, [pc, #128]	; (8003738 <prvAddCurrentTaskToDelayedList+0xb8>)
 80036b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036c0:	d10a      	bne.n	80036d8 <prvAddCurrentTaskToDelayedList+0x58>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036c8:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	481a      	ldr	r0, [pc, #104]	; (800373c <prvAddCurrentTaskToDelayedList+0xbc>)
 80036d2:	f7fe fb82 	bl	8001dda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80036d6:	e026      	b.n	8003726 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80036e0:	4b14      	ldr	r3, [pc, #80]	; (8003734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d209      	bcs.n	8003704 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <prvAddCurrentTaskToDelayedList+0xc0>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3304      	adds	r3, #4
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f7fe fb90 	bl	8001e22 <vListInsert>
}
 8003702:	e010      	b.n	8003726 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <prvAddCurrentTaskToDelayedList+0xb4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3304      	adds	r3, #4
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f7fe fb86 	bl	8001e22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003716:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	429a      	cmp	r2, r3
 800371e:	d202      	bcs.n	8003726 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003720:	4a09      	ldr	r2, [pc, #36]	; (8003748 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	6013      	str	r3, [r2, #0]
}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000108 	.word	0x20000108
 8003734:	2000002c 	.word	0x2000002c
 8003738:	2000010c 	.word	0x2000010c
 800373c:	200000f0 	.word	0x200000f0
 8003740:	200000c0 	.word	0x200000c0
 8003744:	200000bc 	.word	0x200000bc
 8003748:	20000124 	.word	0x20000124

0800374c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8003752:	2300      	movs	r3, #0
 8003754:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003756:	f000 fad1 	bl	8003cfc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <xTimerCreateTimerTask+0x54>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <xTimerCreateTimerTask+0x58>)
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	2302      	movs	r3, #2
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	2300      	movs	r3, #0
 800376c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003770:	490d      	ldr	r1, [pc, #52]	; (80037a8 <xTimerCreateTimerTask+0x5c>)
 8003772:	480e      	ldr	r0, [pc, #56]	; (80037ac <xTimerCreateTimerTask+0x60>)
 8003774:	f7ff f854 	bl	8002820 <xTaskCreate>
 8003778:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <xTimerCreateTimerTask+0x48>
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	e7fe      	b.n	8003792 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8003794:	687b      	ldr	r3, [r7, #4]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000160 	.word	0x20000160
 80037a4:	20000164 	.word	0x20000164
 80037a8:	08004650 	.word	0x08004650
 80037ac:	080038e1 	.word	0x080038e1

080037b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80037be:	2300      	movs	r3, #0
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <xTimerGenericCommand+0x2c>
 80037c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	623b      	str	r3, [r7, #32]
 80037da:	e7fe      	b.n	80037da <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80037dc:	4b19      	ldr	r3, [pc, #100]	; (8003844 <xTimerGenericCommand+0x94>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d02a      	beq.n	800383a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b05      	cmp	r3, #5
 80037f4:	dc18      	bgt.n	8003828 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80037f6:	f7ff fea1 	bl	800353c <xTaskGetSchedulerState>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d109      	bne.n	8003814 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003800:	4b10      	ldr	r3, [pc, #64]	; (8003844 <xTimerGenericCommand+0x94>)
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	f107 0114 	add.w	r1, r7, #20
 8003808:	2300      	movs	r3, #0
 800380a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380c:	f7fe fc32 	bl	8002074 <xQueueGenericSend>
 8003810:	6278      	str	r0, [r7, #36]	; 0x24
 8003812:	e012      	b.n	800383a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <xTimerGenericCommand+0x94>)
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	f107 0114 	add.w	r1, r7, #20
 800381c:	2300      	movs	r3, #0
 800381e:	2200      	movs	r2, #0
 8003820:	f7fe fc28 	bl	8002074 <xQueueGenericSend>
 8003824:	6278      	str	r0, [r7, #36]	; 0x24
 8003826:	e008      	b.n	800383a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <xTimerGenericCommand+0x94>)
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	f107 0114 	add.w	r1, r7, #20
 8003830:	2300      	movs	r3, #0
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	f7fe fd18 	bl	8002268 <xQueueGenericSendFromISR>
 8003838:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800383c:	4618      	mov	r0, r3
 800383e:	3728      	adds	r7, #40	; 0x28
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000160 	.word	0x20000160

08003848 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af02      	add	r7, sp, #8
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003852:	4b22      	ldr	r3, [pc, #136]	; (80038dc <prvProcessExpiredTimer+0x94>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3304      	adds	r3, #4
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe fb17 	bl	8001e94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d021      	beq.n	80038b8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	699a      	ldr	r2, [r3, #24]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	18d1      	adds	r1, r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	6978      	ldr	r0, [r7, #20]
 8003882:	f000 f8d1 	bl	8003a28 <prvInsertTimerInActiveList>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01e      	beq.n	80038ca <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800388c:	2300      	movs	r3, #0
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	2300      	movs	r3, #0
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	2100      	movs	r1, #0
 8003896:	6978      	ldr	r0, [r7, #20]
 8003898:	f7ff ff8a 	bl	80037b0 <xTimerGenericCommand>
 800389c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d112      	bne.n	80038ca <prvProcessExpiredTimer+0x82>
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e7fe      	b.n	80038b6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	6978      	ldr	r0, [r7, #20]
 80038d0:	4798      	blx	r3
}
 80038d2:	bf00      	nop
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000158 	.word	0x20000158

080038e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038e8:	f107 0308 	add.w	r3, r7, #8
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 f857 	bl	80039a0 <prvGetNextExpireTime>
 80038f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4619      	mov	r1, r3
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f803 	bl	8003904 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80038fe:	f000 f8d5 	bl	8003aac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003902:	e7f1      	b.n	80038e8 <prvTimerTask+0x8>

08003904 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800390e:	f7ff fa63 	bl	8002dd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003912:	f107 0308 	add.w	r3, r7, #8
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f866 	bl	80039e8 <prvSampleTimeNow>
 800391c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d130      	bne.n	8003986 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <prvProcessTimerOrBlockTask+0x3c>
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	429a      	cmp	r2, r3
 8003930:	d806      	bhi.n	8003940 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003932:	f7ff fa5f 	bl	8002df4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003936:	68f9      	ldr	r1, [r7, #12]
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ff85 	bl	8003848 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800393e:	e024      	b.n	800398a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003946:	4b13      	ldr	r3, [pc, #76]	; (8003994 <prvProcessTimerOrBlockTask+0x90>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <prvProcessTimerOrBlockTask+0x50>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <prvProcessTimerOrBlockTask+0x52>
 8003954:	2300      	movs	r3, #0
 8003956:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003958:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <prvProcessTimerOrBlockTask+0x94>)
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	4619      	mov	r1, r3
 8003966:	f7fe ff27 	bl	80027b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800396a:	f7ff fa43 	bl	8002df4 <xTaskResumeAll>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003974:	4b09      	ldr	r3, [pc, #36]	; (800399c <prvProcessTimerOrBlockTask+0x98>)
 8003976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	f3bf 8f6f 	isb	sy
}
 8003984:	e001      	b.n	800398a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003986:	f7ff fa35 	bl	8002df4 <xTaskResumeAll>
}
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	2000015c 	.word	0x2000015c
 8003998:	20000160 	.word	0x20000160
 800399c:	e000ed04 	.word	0xe000ed04

080039a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039a8:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <prvGetNextExpireTime+0x44>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <prvGetNextExpireTime+0x16>
 80039b2:	2201      	movs	r2, #1
 80039b4:	e000      	b.n	80039b8 <prvGetNextExpireTime+0x18>
 80039b6:	2200      	movs	r2, #0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d105      	bne.n	80039d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <prvGetNextExpireTime+0x44>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	e001      	b.n	80039d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80039d4:	68fb      	ldr	r3, [r7, #12]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000158 	.word	0x20000158

080039e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80039f0:	f7ff fa9c 	bl	8002f2c <xTaskGetTickCount>
 80039f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <prvSampleTimeNow+0x3c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d205      	bcs.n	8003a0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003a00:	f000 f918 	bl	8003c34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e002      	b.n	8003a12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003a12:	4a04      	ldr	r2, [pc, #16]	; (8003a24 <prvSampleTimeNow+0x3c>)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003a18:	68fb      	ldr	r3, [r7, #12]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000168 	.word	0x20000168

08003a28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d812      	bhi.n	8003a74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	1ad2      	subs	r2, r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d302      	bcc.n	8003a62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	e01b      	b.n	8003a9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <prvInsertTimerInActiveList+0x7c>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	f7fe f9d8 	bl	8001e22 <vListInsert>
 8003a72:	e012      	b.n	8003a9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d206      	bcs.n	8003a8a <prvInsertTimerInActiveList+0x62>
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d302      	bcc.n	8003a8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003a84:	2301      	movs	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	e007      	b.n	8003a9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <prvInsertTimerInActiveList+0x80>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3304      	adds	r3, #4
 8003a92:	4619      	mov	r1, r3
 8003a94:	4610      	mov	r0, r2
 8003a96:	f7fe f9c4 	bl	8001e22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003a9a:	697b      	ldr	r3, [r7, #20]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	2000015c 	.word	0x2000015c
 8003aa8:	20000158 	.word	0x20000158

08003aac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08c      	sub	sp, #48	; 0x30
 8003ab0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ab2:	e0ac      	b.n	8003c0e <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f2c0 80a8 	blt.w	8003c0c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d004      	beq.n	8003ad2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	3304      	adds	r3, #4
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe f9e1 	bl	8001e94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ad2:	1d3b      	adds	r3, r7, #4
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff87 	bl	80039e8 <prvSampleTimeNow>
 8003ada:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b09      	cmp	r3, #9
 8003ae0:	f200 8095 	bhi.w	8003c0e <prvProcessReceivedCommands+0x162>
 8003ae4:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <prvProcessReceivedCommands+0x40>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b15 	.word	0x08003b15
 8003af0:	08003b15 	.word	0x08003b15
 8003af4:	08003b15 	.word	0x08003b15
 8003af8:	08003b87 	.word	0x08003b87
 8003afc:	08003b9b 	.word	0x08003b9b
 8003b00:	08003be3 	.word	0x08003be3
 8003b04:	08003b15 	.word	0x08003b15
 8003b08:	08003b15 	.word	0x08003b15
 8003b0c:	08003b87 	.word	0x08003b87
 8003b10:	08003b9b 	.word	0x08003b9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	18d1      	adds	r1, r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b34:	f7ff ff78 	bl	8003a28 <prvInsertTimerInActiveList>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d067      	beq.n	8003c0e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d05c      	beq.n	8003c0e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	441a      	add	r2, r3
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	2300      	movs	r3, #0
 8003b62:	2100      	movs	r1, #0
 8003b64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b66:	f7ff fe23 	bl	80037b0 <xTimerGenericCommand>
 8003b6a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d14d      	bne.n	8003c0e <prvProcessReceivedCommands+0x162>
 8003b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	61bb      	str	r3, [r7, #24]
 8003b84:	e7fe      	b.n	8003b84 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003b98:	e039      	b.n	8003c0e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <prvProcessReceivedCommands+0x122>
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e7fe      	b.n	8003bcc <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	18d1      	adds	r1, r2, r3
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	6a3a      	ldr	r2, [r7, #32]
 8003bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bdc:	f7ff ff24 	bl	8003a28 <prvInsertTimerInActiveList>
					break;
 8003be0:	e015      	b.n	8003c0e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d103      	bne.n	8003bf8 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8003bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bf2:	f000 fbbf 	bl	8004374 <vPortFree>
 8003bf6:	e00a      	b.n	8003c0e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003c0a:	e000      	b.n	8003c0e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003c0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c0e:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <prvProcessReceivedCommands+0x184>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f107 0108 	add.w	r1, r7, #8
 8003c16:	2200      	movs	r2, #0
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe fbb9 	bl	8002390 <xQueueReceive>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f47f af47 	bne.w	8003ab4 <prvProcessReceivedCommands+0x8>
	}
}
 8003c26:	bf00      	nop
 8003c28:	3728      	adds	r7, #40	; 0x28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000160 	.word	0x20000160

08003c34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c3a:	e047      	b.n	8003ccc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	; (8003cf4 <prvSwitchTimerLists+0xc0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c46:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <prvSwitchTimerLists+0xc0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe f91d 	bl	8001e94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d02d      	beq.n	8003ccc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4413      	add	r3, r2
 8003c78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d90e      	bls.n	8003ca0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c8e:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <prvSwitchTimerLists+0xc0>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3304      	adds	r3, #4
 8003c96:	4619      	mov	r1, r3
 8003c98:	4610      	mov	r0, r2
 8003c9a:	f7fe f8c2 	bl	8001e22 <vListInsert>
 8003c9e:	e015      	b.n	8003ccc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	2100      	movs	r1, #0
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff fd80 	bl	80037b0 <xTimerGenericCommand>
 8003cb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <prvSwitchTimerLists+0x98>
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	e7fe      	b.n	8003cca <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ccc:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <prvSwitchTimerLists+0xc0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1b2      	bne.n	8003c3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003cd6:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <prvSwitchTimerLists+0xc0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <prvSwitchTimerLists+0xc4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <prvSwitchTimerLists+0xc0>)
 8003ce2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003ce4:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <prvSwitchTimerLists+0xc4>)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	6013      	str	r3, [r2, #0]
}
 8003cea:	bf00      	nop
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000158 	.word	0x20000158
 8003cf8:	2000015c 	.word	0x2000015c

08003cfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003d00:	f000 f95c 	bl	8003fbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003d04:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <prvCheckForValidListAndQueue+0x54>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11d      	bne.n	8003d48 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003d0c:	4811      	ldr	r0, [pc, #68]	; (8003d54 <prvCheckForValidListAndQueue+0x58>)
 8003d0e:	f7fe f837 	bl	8001d80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003d12:	4811      	ldr	r0, [pc, #68]	; (8003d58 <prvCheckForValidListAndQueue+0x5c>)
 8003d14:	f7fe f834 	bl	8001d80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003d18:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <prvCheckForValidListAndQueue+0x60>)
 8003d1a:	4a0e      	ldr	r2, [pc, #56]	; (8003d54 <prvCheckForValidListAndQueue+0x58>)
 8003d1c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003d1e:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <prvCheckForValidListAndQueue+0x64>)
 8003d20:	4a0d      	ldr	r2, [pc, #52]	; (8003d58 <prvCheckForValidListAndQueue+0x5c>)
 8003d22:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003d24:	2200      	movs	r2, #0
 8003d26:	210c      	movs	r1, #12
 8003d28:	200a      	movs	r0, #10
 8003d2a:	f7fe f945 	bl	8001fb8 <xQueueGenericCreate>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <prvCheckForValidListAndQueue+0x54>)
 8003d32:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <prvCheckForValidListAndQueue+0x54>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <prvCheckForValidListAndQueue+0x54>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4908      	ldr	r1, [pc, #32]	; (8003d64 <prvCheckForValidListAndQueue+0x68>)
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fd10 	bl	8002768 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d48:	f000 f966 	bl	8004018 <vPortExitCritical>
}
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20000160 	.word	0x20000160
 8003d54:	20000130 	.word	0x20000130
 8003d58:	20000144 	.word	0x20000144
 8003d5c:	20000158 	.word	0x20000158
 8003d60:	2000015c 	.word	0x2000015c
 8003d64:	08004658 	.word	0x08004658

08003d68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3b04      	subs	r3, #4
 8003d78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3b04      	subs	r3, #4
 8003d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f023 0201 	bic.w	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3b04      	subs	r3, #4
 8003d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d98:	4a0c      	ldr	r2, [pc, #48]	; (8003dcc <pxPortInitialiseStack+0x64>)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3b14      	subs	r3, #20
 8003da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3b04      	subs	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f06f 0202 	mvn.w	r2, #2
 8003db6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3b20      	subs	r3, #32
 8003dbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	08003dd1 	.word	0x08003dd1

08003dd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003dda:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <prvTaskExitError+0x50>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003de2:	d009      	beq.n	8003df8 <prvTaskExitError+0x28>
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	e7fe      	b.n	8003df6 <prvTaskExitError+0x26>
 8003df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e0a:	bf00      	nop
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0fc      	beq.n	8003e0c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	2000000c 	.word	0x2000000c
	...

08003e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <pxCurrentTCBConst2>)
 8003e32:	6819      	ldr	r1, [r3, #0]
 8003e34:	6808      	ldr	r0, [r1, #0]
 8003e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3a:	f380 8809 	msr	PSP, r0
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f380 8811 	msr	BASEPRI, r0
 8003e4a:	4770      	bx	lr
 8003e4c:	f3af 8000 	nop.w

08003e50 <pxCurrentTCBConst2>:
 8003e50:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop

08003e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e58:	4808      	ldr	r0, [pc, #32]	; (8003e7c <prvPortStartFirstTask+0x24>)
 8003e5a:	6800      	ldr	r0, [r0, #0]
 8003e5c:	6800      	ldr	r0, [r0, #0]
 8003e5e:	f380 8808 	msr	MSP, r0
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f380 8814 	msr	CONTROL, r0
 8003e6a:	b662      	cpsie	i
 8003e6c:	b661      	cpsie	f
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	df00      	svc	0
 8003e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e7a:	bf00      	nop
 8003e7c:	e000ed08 	.word	0xe000ed08

08003e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e86:	4b44      	ldr	r3, [pc, #272]	; (8003f98 <xPortStartScheduler+0x118>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a44      	ldr	r2, [pc, #272]	; (8003f9c <xPortStartScheduler+0x11c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d109      	bne.n	8003ea4 <xPortStartScheduler+0x24>
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	e7fe      	b.n	8003ea2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ea4:	4b3c      	ldr	r3, [pc, #240]	; (8003f98 <xPortStartScheduler+0x118>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a3d      	ldr	r2, [pc, #244]	; (8003fa0 <xPortStartScheduler+0x120>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d109      	bne.n	8003ec2 <xPortStartScheduler+0x42>
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e7fe      	b.n	8003ec0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ec2:	4b38      	ldr	r3, [pc, #224]	; (8003fa4 <xPortStartScheduler+0x124>)
 8003ec4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	22ff      	movs	r2, #255	; 0xff
 8003ed2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	4b30      	ldr	r3, [pc, #192]	; (8003fa8 <xPortStartScheduler+0x128>)
 8003ee8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003eea:	4b30      	ldr	r3, [pc, #192]	; (8003fac <xPortStartScheduler+0x12c>)
 8003eec:	2207      	movs	r2, #7
 8003eee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ef0:	e009      	b.n	8003f06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003ef2:	4b2e      	ldr	r3, [pc, #184]	; (8003fac <xPortStartScheduler+0x12c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	4a2c      	ldr	r2, [pc, #176]	; (8003fac <xPortStartScheduler+0x12c>)
 8003efa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	2b80      	cmp	r3, #128	; 0x80
 8003f10:	d0ef      	beq.n	8003ef2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f12:	4b26      	ldr	r3, [pc, #152]	; (8003fac <xPortStartScheduler+0x12c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f1c3 0307 	rsb	r3, r3, #7
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d009      	beq.n	8003f32 <xPortStartScheduler+0xb2>
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	e7fe      	b.n	8003f30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f32:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <xPortStartScheduler+0x12c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	4a1c      	ldr	r2, [pc, #112]	; (8003fac <xPortStartScheduler+0x12c>)
 8003f3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <xPortStartScheduler+0x12c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f44:	4a19      	ldr	r2, [pc, #100]	; (8003fac <xPortStartScheduler+0x12c>)
 8003f46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f50:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <xPortStartScheduler+0x130>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a16      	ldr	r2, [pc, #88]	; (8003fb0 <xPortStartScheduler+0x130>)
 8003f56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f5c:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <xPortStartScheduler+0x130>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <xPortStartScheduler+0x130>)
 8003f62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f68:	f000 f8d6 	bl	8004118 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <xPortStartScheduler+0x134>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f72:	f000 f8f5 	bl	8004160 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <xPortStartScheduler+0x138>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a0f      	ldr	r2, [pc, #60]	; (8003fb8 <xPortStartScheduler+0x138>)
 8003f7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f82:	f7ff ff69 	bl	8003e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f86:	f7ff f899 	bl	80030bc <vTaskSwitchContext>
	prvTaskExitError();
 8003f8a:	f7ff ff21 	bl	8003dd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	e000ed00 	.word	0xe000ed00
 8003f9c:	410fc271 	.word	0x410fc271
 8003fa0:	410fc270 	.word	0x410fc270
 8003fa4:	e000e400 	.word	0xe000e400
 8003fa8:	2000016c 	.word	0x2000016c
 8003fac:	20000170 	.word	0x20000170
 8003fb0:	e000ed20 	.word	0xe000ed20
 8003fb4:	2000000c 	.word	0x2000000c
 8003fb8:	e000ef34 	.word	0xe000ef34

08003fbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <vPortEnterCritical+0x54>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	4a0d      	ldr	r2, [pc, #52]	; (8004010 <vPortEnterCritical+0x54>)
 8003fdc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <vPortEnterCritical+0x54>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d10e      	bne.n	8004004 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <vPortEnterCritical+0x58>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <vPortEnterCritical+0x48>
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	603b      	str	r3, [r7, #0]
 8004002:	e7fe      	b.n	8004002 <vPortEnterCritical+0x46>
	}
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	2000000c 	.word	0x2000000c
 8004014:	e000ed04 	.word	0xe000ed04

08004018 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800401e:	4b11      	ldr	r3, [pc, #68]	; (8004064 <vPortExitCritical+0x4c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d109      	bne.n	800403a <vPortExitCritical+0x22>
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	607b      	str	r3, [r7, #4]
 8004038:	e7fe      	b.n	8004038 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <vPortExitCritical+0x4c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3b01      	subs	r3, #1
 8004040:	4a08      	ldr	r2, [pc, #32]	; (8004064 <vPortExitCritical+0x4c>)
 8004042:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004044:	4b07      	ldr	r3, [pc, #28]	; (8004064 <vPortExitCritical+0x4c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <vPortExitCritical+0x3e>
 800404c:	2300      	movs	r3, #0
 800404e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c
	...

08004070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004070:	f3ef 8009 	mrs	r0, PSP
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <pxCurrentTCBConst>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	f01e 0f10 	tst.w	lr, #16
 8004080:	bf08      	it	eq
 8004082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408a:	6010      	str	r0, [r2, #0]
 800408c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004094:	f380 8811 	msr	BASEPRI, r0
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f7ff f80c 	bl	80030bc <vTaskSwitchContext>
 80040a4:	f04f 0000 	mov.w	r0, #0
 80040a8:	f380 8811 	msr	BASEPRI, r0
 80040ac:	bc09      	pop	{r0, r3}
 80040ae:	6819      	ldr	r1, [r3, #0]
 80040b0:	6808      	ldr	r0, [r1, #0]
 80040b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b6:	f01e 0f10 	tst.w	lr, #16
 80040ba:	bf08      	it	eq
 80040bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040c0:	f380 8809 	msr	PSP, r0
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	f3af 8000 	nop.w

080040d0 <pxCurrentTCBConst>:
 80040d0:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop

080040d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040f0:	f7fe ff2c 	bl	8002f4c <xTaskIncrementTick>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <SysTick_Handler+0x3c>)
 80040fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	2300      	movs	r3, #0
 8004104:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	e000ed04 	.word	0xe000ed04

08004118 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <vPortSetupTimerInterrupt+0x34>)
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004122:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <vPortSetupTimerInterrupt+0x38>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004128:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <vPortSetupTimerInterrupt+0x3c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <vPortSetupTimerInterrupt+0x40>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	099b      	lsrs	r3, r3, #6
 8004134:	4a09      	ldr	r2, [pc, #36]	; (800415c <vPortSetupTimerInterrupt+0x44>)
 8004136:	3b01      	subs	r3, #1
 8004138:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800413a:	4b04      	ldr	r3, [pc, #16]	; (800414c <vPortSetupTimerInterrupt+0x34>)
 800413c:	2207      	movs	r2, #7
 800413e:	601a      	str	r2, [r3, #0]
}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	e000e010 	.word	0xe000e010
 8004150:	e000e018 	.word	0xe000e018
 8004154:	20000000 	.word	0x20000000
 8004158:	10624dd3 	.word	0x10624dd3
 800415c:	e000e014 	.word	0xe000e014

08004160 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004160:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004170 <vPortEnableVFP+0x10>
 8004164:	6801      	ldr	r1, [r0, #0]
 8004166:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800416a:	6001      	str	r1, [r0, #0]
 800416c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800416e:	bf00      	nop
 8004170:	e000ed88 	.word	0xe000ed88

08004174 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800417a:	f3ef 8305 	mrs	r3, IPSR
 800417e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b0f      	cmp	r3, #15
 8004184:	d913      	bls.n	80041ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004186:	4a16      	ldr	r2, [pc, #88]	; (80041e0 <vPortValidateInterruptPriority+0x6c>)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004190:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <vPortValidateInterruptPriority+0x70>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	7afa      	ldrb	r2, [r7, #11]
 8004196:	429a      	cmp	r2, r3
 8004198:	d209      	bcs.n	80041ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	607b      	str	r3, [r7, #4]
 80041ac:	e7fe      	b.n	80041ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80041ae:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <vPortValidateInterruptPriority+0x74>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <vPortValidateInterruptPriority+0x78>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d909      	bls.n	80041d2 <vPortValidateInterruptPriority+0x5e>
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	e7fe      	b.n	80041d0 <vPortValidateInterruptPriority+0x5c>
	}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	e000e3f0 	.word	0xe000e3f0
 80041e4:	2000016c 	.word	0x2000016c
 80041e8:	e000ed0c 	.word	0xe000ed0c
 80041ec:	20000170 	.word	0x20000170

080041f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	; 0x28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041fc:	f7fe fdec 	bl	8002dd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004200:	4b57      	ldr	r3, [pc, #348]	; (8004360 <pvPortMalloc+0x170>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004208:	f000 f90c 	bl	8004424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800420c:	4b55      	ldr	r3, [pc, #340]	; (8004364 <pvPortMalloc+0x174>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	f040 808c 	bne.w	8004332 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01c      	beq.n	800425a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004220:	2208      	movs	r2, #8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	2b00      	cmp	r3, #0
 8004230:	d013      	beq.n	800425a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f023 0307 	bic.w	r3, r3, #7
 8004238:	3308      	adds	r3, #8
 800423a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <pvPortMalloc+0x6a>
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	e7fe      	b.n	8004258 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d068      	beq.n	8004332 <pvPortMalloc+0x142>
 8004260:	4b41      	ldr	r3, [pc, #260]	; (8004368 <pvPortMalloc+0x178>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	429a      	cmp	r2, r3
 8004268:	d863      	bhi.n	8004332 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800426a:	4b40      	ldr	r3, [pc, #256]	; (800436c <pvPortMalloc+0x17c>)
 800426c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800426e:	4b3f      	ldr	r3, [pc, #252]	; (800436c <pvPortMalloc+0x17c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004274:	e004      	b.n	8004280 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	429a      	cmp	r2, r3
 8004288:	d903      	bls.n	8004292 <pvPortMalloc+0xa2>
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f1      	bne.n	8004276 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004292:	4b33      	ldr	r3, [pc, #204]	; (8004360 <pvPortMalloc+0x170>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004298:	429a      	cmp	r2, r3
 800429a:	d04a      	beq.n	8004332 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2208      	movs	r2, #8
 80042a2:	4413      	add	r3, r2
 80042a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	1ad2      	subs	r2, r2, r3
 80042b6:	2308      	movs	r3, #8
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d91e      	bls.n	80042fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4413      	add	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d009      	beq.n	80042e4 <pvPortMalloc+0xf4>
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	e7fe      	b.n	80042e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	1ad2      	subs	r2, r2, r3
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042f6:	69b8      	ldr	r0, [r7, #24]
 80042f8:	f000 f8f6 	bl	80044e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042fc:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <pvPortMalloc+0x178>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	4a18      	ldr	r2, [pc, #96]	; (8004368 <pvPortMalloc+0x178>)
 8004308:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800430a:	4b17      	ldr	r3, [pc, #92]	; (8004368 <pvPortMalloc+0x178>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b18      	ldr	r3, [pc, #96]	; (8004370 <pvPortMalloc+0x180>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d203      	bcs.n	800431e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <pvPortMalloc+0x178>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a15      	ldr	r2, [pc, #84]	; (8004370 <pvPortMalloc+0x180>)
 800431c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	4b10      	ldr	r3, [pc, #64]	; (8004364 <pvPortMalloc+0x174>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	431a      	orrs	r2, r3
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004332:	f7fe fd5f 	bl	8002df4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	2b00      	cmp	r3, #0
 800433e:	d009      	beq.n	8004354 <pvPortMalloc+0x164>
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	e7fe      	b.n	8004352 <pvPortMalloc+0x162>
	return pvReturn;
 8004354:	69fb      	ldr	r3, [r7, #28]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3728      	adds	r7, #40	; 0x28
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20012d7c 	.word	0x20012d7c
 8004364:	20012d88 	.word	0x20012d88
 8004368:	20012d80 	.word	0x20012d80
 800436c:	20012d74 	.word	0x20012d74
 8004370:	20012d84 	.word	0x20012d84

08004374 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d046      	beq.n	8004414 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004386:	2308      	movs	r3, #8
 8004388:	425b      	negs	r3, r3
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4413      	add	r3, r2
 800438e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	4b20      	ldr	r3, [pc, #128]	; (800441c <vPortFree+0xa8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <vPortFree+0x42>
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	e7fe      	b.n	80043b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <vPortFree+0x5e>
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	60bb      	str	r3, [r7, #8]
 80043d0:	e7fe      	b.n	80043d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	4b11      	ldr	r3, [pc, #68]	; (800441c <vPortFree+0xa8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d019      	beq.n	8004414 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d115      	bne.n	8004414 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <vPortFree+0xa8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	401a      	ands	r2, r3
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043f8:	f7fe fcee 	bl	8002dd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	4b07      	ldr	r3, [pc, #28]	; (8004420 <vPortFree+0xac>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4413      	add	r3, r2
 8004406:	4a06      	ldr	r2, [pc, #24]	; (8004420 <vPortFree+0xac>)
 8004408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800440a:	6938      	ldr	r0, [r7, #16]
 800440c:	f000 f86c 	bl	80044e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004410:	f7fe fcf0 	bl	8002df4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004414:	bf00      	nop
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20012d88 	.word	0x20012d88
 8004420:	20012d80 	.word	0x20012d80

08004424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800442a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800442e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004430:	4b27      	ldr	r3, [pc, #156]	; (80044d0 <prvHeapInit+0xac>)
 8004432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00c      	beq.n	8004458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3307      	adds	r3, #7
 8004442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0307 	bic.w	r3, r3, #7
 800444a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <prvHeapInit+0xac>)
 8004454:	4413      	add	r3, r2
 8004456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800445c:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <prvHeapInit+0xb0>)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004462:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <prvHeapInit+0xb0>)
 8004464:	2200      	movs	r2, #0
 8004466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	4413      	add	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004470:	2208      	movs	r2, #8
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0307 	bic.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <prvHeapInit+0xb4>)
 8004484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <prvHeapInit+0xb4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2200      	movs	r2, #0
 800448c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800448e:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <prvHeapInit+0xb4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	1ad2      	subs	r2, r2, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <prvHeapInit+0xb4>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <prvHeapInit+0xb8>)
 80044b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <prvHeapInit+0xbc>)
 80044ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <prvHeapInit+0xc0>)
 80044be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044c2:	601a      	str	r2, [r3, #0]
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	20000174 	.word	0x20000174
 80044d4:	20012d74 	.word	0x20012d74
 80044d8:	20012d7c 	.word	0x20012d7c
 80044dc:	20012d84 	.word	0x20012d84
 80044e0:	20012d80 	.word	0x20012d80
 80044e4:	20012d88 	.word	0x20012d88

080044e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044f0:	4b28      	ldr	r3, [pc, #160]	; (8004594 <prvInsertBlockIntoFreeList+0xac>)
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e002      	b.n	80044fc <prvInsertBlockIntoFreeList+0x14>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	429a      	cmp	r2, r3
 8004504:	d8f7      	bhi.n	80044f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	4413      	add	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	429a      	cmp	r2, r3
 8004516:	d108      	bne.n	800452a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	441a      	add	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	441a      	add	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d118      	bne.n	8004570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b15      	ldr	r3, [pc, #84]	; (8004598 <prvInsertBlockIntoFreeList+0xb0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d00d      	beq.n	8004566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	441a      	add	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	e008      	b.n	8004578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <prvInsertBlockIntoFreeList+0xb0>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	e003      	b.n	8004578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	d002      	beq.n	8004586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20012d74 	.word	0x20012d74
 8004598:	20012d7c 	.word	0x20012d7c

0800459c <__libc_init_array>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4e0d      	ldr	r6, [pc, #52]	; (80045d4 <__libc_init_array+0x38>)
 80045a0:	4c0d      	ldr	r4, [pc, #52]	; (80045d8 <__libc_init_array+0x3c>)
 80045a2:	1ba4      	subs	r4, r4, r6
 80045a4:	10a4      	asrs	r4, r4, #2
 80045a6:	2500      	movs	r5, #0
 80045a8:	42a5      	cmp	r5, r4
 80045aa:	d109      	bne.n	80045c0 <__libc_init_array+0x24>
 80045ac:	4e0b      	ldr	r6, [pc, #44]	; (80045dc <__libc_init_array+0x40>)
 80045ae:	4c0c      	ldr	r4, [pc, #48]	; (80045e0 <__libc_init_array+0x44>)
 80045b0:	f000 f82c 	bl	800460c <_init>
 80045b4:	1ba4      	subs	r4, r4, r6
 80045b6:	10a4      	asrs	r4, r4, #2
 80045b8:	2500      	movs	r5, #0
 80045ba:	42a5      	cmp	r5, r4
 80045bc:	d105      	bne.n	80045ca <__libc_init_array+0x2e>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045c4:	4798      	blx	r3
 80045c6:	3501      	adds	r5, #1
 80045c8:	e7ee      	b.n	80045a8 <__libc_init_array+0xc>
 80045ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045ce:	4798      	blx	r3
 80045d0:	3501      	adds	r5, #1
 80045d2:	e7f2      	b.n	80045ba <__libc_init_array+0x1e>
 80045d4:	08004680 	.word	0x08004680
 80045d8:	08004680 	.word	0x08004680
 80045dc:	08004680 	.word	0x08004680
 80045e0:	08004684 	.word	0x08004684

080045e4 <memcpy>:
 80045e4:	b510      	push	{r4, lr}
 80045e6:	1e43      	subs	r3, r0, #1
 80045e8:	440a      	add	r2, r1
 80045ea:	4291      	cmp	r1, r2
 80045ec:	d100      	bne.n	80045f0 <memcpy+0xc>
 80045ee:	bd10      	pop	{r4, pc}
 80045f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045f8:	e7f7      	b.n	80045ea <memcpy+0x6>

080045fa <memset>:
 80045fa:	4402      	add	r2, r0
 80045fc:	4603      	mov	r3, r0
 80045fe:	4293      	cmp	r3, r2
 8004600:	d100      	bne.n	8004604 <memset+0xa>
 8004602:	4770      	bx	lr
 8004604:	f803 1b01 	strb.w	r1, [r3], #1
 8004608:	e7f9      	b.n	80045fe <memset+0x4>
	...

0800460c <_init>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	bf00      	nop
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr

08004618 <_fini>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	bf00      	nop
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr
